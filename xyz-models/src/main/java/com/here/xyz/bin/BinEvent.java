/*
 * Copyright (C) 2017-2025 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

// automatically generated by the FlatBuffers compiler, do not modify

package com.here.xyz.bin;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class BinEvent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static BinEvent getRootAsBinEvent(ByteBuffer _bb) { return getRootAsBinEvent(_bb, new BinEvent()); }
  public static BinEvent getRootAsBinEvent(ByteBuffer _bb, BinEvent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BinEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String event() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer eventInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String mimeType() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mimeTypeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer mimeTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int bytes(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int bytesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector bytesVector() { return bytesVector(new ByteVector()); }
  public ByteVector bytesVector(ByteVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bytesAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer bytesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createBinEvent(FlatBufferBuilder builder,
      int eventOffset,
      int mime_typeOffset,
      int bytesOffset) {
    builder.startTable(3);
    BinEvent.addBytes(builder, bytesOffset);
    BinEvent.addMimeType(builder, mime_typeOffset);
    BinEvent.addEvent(builder, eventOffset);
    return BinEvent.endBinEvent(builder);
  }

  public static void startBinEvent(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addEvent(FlatBufferBuilder builder, int eventOffset) { builder.addOffset(0, eventOffset, 0); }
  public static void addMimeType(FlatBufferBuilder builder, int mimeTypeOffset) { builder.addOffset(1, mimeTypeOffset, 0); }
  public static void addBytes(FlatBufferBuilder builder, int bytesOffset) { builder.addOffset(2, bytesOffset, 0); }
  public static int createBytesVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBytesVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBytesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endBinEvent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishBinEventBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedBinEventBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BinEvent get(int j) { return get(new BinEvent(), j); }
    public BinEvent get(BinEvent obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

