openapi: 3.0.2
info:
  title: HERE HTTP-PSQL Connector
  description: |-
    HERE HTTP-PSQL Connector is a PSQL-Connector which provides a REST API to access data and maintain database related stuff. With the included Job API it is possible to perform Jobs (import/export..) on datasets.
  contact: {}
  version: 1.0.0
servers:
  - url: /
tags:
  - name: HTTP-Connector
    description: Endpoint for Events
  - name: Connector-Maintenance
    description: Initialize or maintain underlying databases
  - name: Space-Maintenance
    description: Maintain database releated stuff on space level
paths:
  '/psql/event':
    post:
      tags:
        - HTTP-Conncector
      summary: Event Endpoint
      description: >-
        Process an Event.
      operationId: postEvent
      requestBody:
        description: Entire Event
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Connector Response
        '201':
          description: Connector Response
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/psql/health':
    get:
      tags:
        - HTTP-Conncector
      summary: Health-Check endpoint
      description: >-
        Performes a connector Health-Check
      operationId: getHealthCheck
      responses:
        '200':
          $ref: '#/components/responses/HealthResponse'
  '/psql/connectors/{connectorId}/status':
    get:
      tags:
        - Connector-Maintenance
      summary: Get status of Connector
      description: >-
        Get the status of a connector in focus of its configured underlying database.
      operationId: getStatus
      parameters:
        - $ref: '#/components/parameters/ConnectorIdP'
      responses:
        '200':
          $ref: '#/components/responses/ConnectorStatusResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/psql/connectors/{connectorId}/initialization':
    post:
      tags:
        - Connector-Maintenance
      summary:  Connector Initialization
      description: Initialize the underlying database from a connector
      operationId: postInitialization
      parameters:
        - $ref: '#/components/parameters/ConnectorIdP'
        - name: force
          in: query
          description: >-
            Force
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '405':
          $ref: '#/components/responses/ErrorResponse405'
  '/psql/connectors/{connectorId}/maintain/indices':
    post:
      tags:
        - Connector-Maintenance
      summary: Trigger Index Maintenance
      description: Maintain all Indices which are getting created automatically
      operationId: postMaintainIndices
      parameters:
        - $ref: '#/components/parameters/ConnectorIdP'
        - name: autoIndexing
          in: query
          description: >-
            Choose if AutoIndexing should get triggerd
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/psql/maintain/spaces/{spaceId}':
    get:
      tags:
        - Space-Maintenance
      summary: Get maintainance status of a Space
      description: Reteives information about the current maintenance status of a space.
      operationId: getMaintenanceStatusSpace
      parameters:
        - $ref: '#/components/parameters/SpaceId'
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
    post:
      tags:
        - Space-Maintenance
      summary: Trigger Space Maintenance
      description: Maintain all Indices which are required for a space
      operationId: postMaintainSpace
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - name: force
          in: query
          description: >-
            Force
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/psql/maintain/spaces/{spaceId}/purge':
    post:
      tags:
        - Space-Maintenance
      summary: Purge old versions of a space
      description: Delete outdated versions
      operationId: postPurgeVersions
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - name: minTagVersion
          in: query
          description: >-
            minTagVersion
          required: false
          schema:
            type: integer
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/spaces/{spaceId}/jobs':
    post:
      tags:
        - Manage Jobs
      summary: Create Job
      operationId: postJob
      parameters:
        - $ref: '#/components/parameters/SpaceId'
      requestBody:
        $ref: '#/components/requestBodies/JobRequest'
      responses:
        '201':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
    get:
      tags:
        - Manage Jobs
      summary: Get jobs
      description: Retrieve jobs
      operationId: getJobs
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/JobStatus'
      responses:
        '200':
          $ref: '#/components/responses/JobsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  '/spaces/{spaceId}/jobs/{jobId}':
    get:
      tags:
        - Manage Jobs
      summary: Get job
      description: Retrieve job
      operationId: getJob
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/JobId'
      responses:
        '200':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    patch:
      tags:
        - Manage Jobs
      summary: Update Job
      operationId: patchJob
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/JobId'
      requestBody:
        $ref: '#/components/requestBodies/JobRequest'
      responses:
        '200':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    delete:
      tags:
        - Manage Jobs
      summary: Delete job
      description: Delete job
      operationId: deleteJob
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/JobId'
        - $ref: '#/components/parameters/DeleteData'
      responses:
        '200':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  /spaces/{spaceId}/jobs/{jobId}/status:
    patch:
      tags:
        - "Manage Jobs"
      summary: "Update job status"
      description: "Update job status using provided action"
      operationId: "patchJobStatus"
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: "#/components/parameters/JobId"
      requestBody:
        $ref: "#/components/requestBodies/JobStatusRequest"
      responses:
        "202":
          $ref: "#/components/responses/JobStatusResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse400"
        "404":
          $ref: "#/components/responses/ErrorResponse404"
    get:
      tags:
        - "Manage Jobs"
      summary: "Get job status"
      description: "Retrieve job status"
      operationId: "getJobStatus"
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: "#/components/parameters/JobId"
      responses:
        "200":
          $ref: "#/components/responses/JobStatusResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse400"
        "404":
          $ref: "#/components/responses/ErrorResponse404"
  '/psql/jobs':
    post:
      tags:
        - Jobs (deprecated)
      summary: Create Job
      operationId: postJobLegacy
      requestBody:
        description: Creates a new job.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '201':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
    get:
      tags:
        - Jobs (deprecated)
      summary: Get jobs
      description: Reteive jobs
      operationId: getJobsLegacy
      parameters:
        - $ref: '#/components/parameters/JobType'
        - $ref: '#/components/parameters/JobStatus'
        - $ref: '#/components/parameters/TargetSpaceId'
      responses:
        '200':
          $ref: '#/components/responses/JobsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/psql/jobs/{jobId}':
    get:
      tags:
        - Jobs (deprecated)
      summary: Get job
      description: Reteive job
      operationId: getJobLegacy
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    patch:
      tags:
        - Jobs (deprecated)
      summary: Update Job
      operationId: patchJobLegacy
      parameters:
        - $ref: '#/components/parameters/JobId'
      requestBody:
        description: Update a existing job.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '200':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    delete:
      tags:
        - Jobs (deprecated)
      summary: Delete job
      description: Delete job
      operationId: deleteJobLegacy
      parameters:
        - $ref: '#/components/parameters/JobId'
        - $ref: '#/components/parameters/DeleteData'
      responses:
        '200':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  '/psql/jobs/{jobId}/execute':
    post:
      tags:
        - Jobs (deprecated)
      summary: Run Command
      description: Run Command on Job
      operationId: postExecuteLegacy
      parameters:
        - $ref: '#/components/parameters/JobId'
        - $ref: '#/components/parameters/UrlCount'
        - $ref: '#/components/parameters/Command'
      responses:
        '204':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '412':
          $ref: '#/components/responses/ErrorResponse412'
components:
  parameters:
    JobId:
      name: jobId
      in: path
      description: The unique identifier of the job.
      required: true
      schema:
        type: string
    JobType:
      name: type
      in: query
      description: Type of Job
      required: false
      schema:
        type: string
        enum:
          - Import
          - Export
    JobStatus:
      name: status
      in: query
      description: Job Status
      required: false
      schema:
        type: string
        enum:
          - waiting
          - queued
          - validating
          - preparing
          - prepared
          - executing
          - executed
          - finalizing
          - finalized
          - aborted
          - failed
    TargetSpaceId:
      name: targetSpaceId
      in: query
      description: targetSpaceId
      required: false
      schema:
        type: string
    Command:
      name: command
      in: query
      description: Command
      required: true
      schema:
        type: string
        enum:
          - start
          - retry
          - abort
          - createUploadUrl
    UrlCount:
      name: urlCount
      in: query
      description: >-
        The number of upload URLs need to be created. It is only applicable when command=createUploadUrl.
        
        
        *Allowed range* : 1-1000
      required: false
      schema:
        type: number
        default: 1
        minimum: 1
        maximum: 1000
    DeleteData:
      name: deleteData
      in: query
      description: >-
        By setting deleteData=true also immediate deletion of import and export files is getting performed.
      required: false
      schema:
        type: boolean
    SpaceId:
      name: spaceId
      in: path
      description: The unique identifier of the space.
      required: true
      schema:
        type: string
    ConnectorIdP:
      name: connectorId
      in: path
      description: The unique identifier of the connector.
      required: true
      schema:
        type: string
    ConnectorId:
      name: connectorId
      in: query
      description: >-
        Provide ConnectorId
      required: true
      schema:
        type: string
    ECPS:
      name: ecps
      in: query
      description: >-
        Provide ECPS String
      required: true
      schema:
        type: string
    Passphrase:
      name: passphrase
      in: query
      description: >-
        Provide ECPS Passphrase
      required: false
      schema:
        type: string
  responses:
    EmptyResponse:
      description: >-
        An empty response as a result of a user-request with accepted MIME type application/x-empty.
      content:
        application/x-empty:
          schema:
            type: string
    ErrorResponse400:
      description: Malformed or Bad Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: <Invalid request details>
    ErrorResponse404:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: The requested resource does not exist.
    ErrorResponse405:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: Method Not Allowed.
    ErrorResponse409:
      description: An error response which indicates a conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: The record exists.
    ErrorResponse412:
      description: An error response which indicates a failed precondition.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: Precondition Failed.
    JobResponse:
      description: The Job
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Job'
    JobsResponse:
      description: Job List
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Job'
    HealthResponse:
      description: HealhCheck Response
      content:
        application/json:
          examples:
            response:
              value:
                status: OK
    ConnectorStatusResponse:
      description: ConnectorStatus Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectorStatus'
    JobStatusResponse:
      description: "The Job's runtime status"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobStatus"
  requestBodies:
    JobRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Job'
    JobStatusRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobStatus"
          example:
            desiredAction: "START"
  schemas:
    Error:
      type: object
      description: >-
        The response send when the request failed. This response may be send for
        certain HTTP error codes like 403 Forbidden or 502 Bad Gateway and
        should hold more details about the error reason.
      properties:
        streamId:
          description: >-
            A unique identifier of the request. This identifier should be
            provided when reporting errors. Its used to track requests
            through the XYZ platform.
          type: string
        type:
          type: string
          description: The type of the error. Defaults to 'ErrorResponse'.
        error:
          type: string
          description: The error summary.
        errorMessage:
          type: string
          description: >-
            A human readable message in English that should provide a more
            detailed description of the error reason.
    Event:
      type: object
      description: A data holder for features which points to a persistent storage.
      properties:
        type:
          description: >-
            The unique identifier of the event type
          example: HealthCheckEvent
          type: string
      example:
        type: HealthCheckEvent
        connectorParams:
          connectorId: test
          propertySearch: true
    Job:
      type: object
      description: >-
        A job which can be executed by the XYZ Job API.
        There are different kinds of tasks to be executed by a job depending on its specified
        source and target dataset-descriptions.
      properties:
        type:
          description: >-
            The type of the job (deprecated)
          example: Import
          type: string
        id:
          description: >-
            The unique identifier of the job.
            NOTE: The id will always be generated by the service. It can not be defined by the client.
          example: ZMlfeaN8B8
          type: string
        description:
          description: >-
            A human readable description of the purpose of the job
          example: This job imports some GeoJSON data to my space
          type: string
        source:
          oneOf:
            - $ref: '#/components/schemas/SourceSpaceDataset'
            - $ref: '#/components/schemas/SourceFilesDataset'
        target:
          oneOf:
            - $ref: '#/components/schemas/TargetFilesDataset'
            - $ref: '#/components/schemas/SpaceDataset'
      example:
        description: This job exports some data from my space into GeoJSON files
        source:
          type: Space
          id: sdkeuh7
        target:
          type: Files
    DatasetDescription:
      type: object
      discriminator:
        propertyName: type
        mapping:
          Files: '#/components/schemas/FilesDataset'
          Space: '#/components/schemas/SpaceDataset'
      required:
        - type
      properties:
        type:
          description: The type of the dataset
          example: Files
          type: string
    FilesDataset:
      allOf:
        - $ref: '#/components/schemas/DatasetDescription'
        - type: object
          properties:
            type:
              description: The type is "Files"
              example: Files
              type: string
              enum:
                - Files
    SourceFilesDataset:
      allOf:
        - $ref: '#/components/schemas/FilesDataset'
        - type: object
          properties:
            inputSettings:
              $ref: '#/components/schemas/FileInputSettings'
    TargetFilesDataset:
      allOf:
        - $ref: '#/components/schemas/FilesDataset'
        - type: object
          properties:
            outputSettings:
              $ref: '#/components/schemas/FileOutputSettings'
    FileInputSettings:
      type: object
      properties:
        format:
          oneOf:
            - $ref: '#/components/schemas/GeoJsonFormat'
            - $ref: '#/components/schemas/GeoParquetFormat'
    FileOutputSettings:
      type: object
      properties:
        format:
          oneOf:
            - $ref: '#/components/schemas/GeoJsonFormat'
            - $ref: '#/components/schemas/GeoParquetFormat'
        partitioning:
          oneOf:
            - $ref: '#/components/schemas/TilePartitioning'
            - $ref: '#/components/schemas/FeatureKeyPartitioning'
    OutputPartitioning:
      type: object
      discriminator:
        propertyName: type
        mapping:
          Tiles: '#/components/schemas/TilePartitioning'
          FeatureKey: '#/components/schemas/FeatureKeyPartitioning'
      required:
        - type
      properties:
        type:
          description: The type of the file format
          example: GeoJson
          type: string
    TilePartitioning:
      allOf:
        - $ref: '#/components/schemas/OutputPartitioning'
        - type: object
          properties:
            type:
              description: The type is "Tiles"
              example: Tiles
              type: string
              enum:
                - Tiles
            level:
              type: integer
              description: The tile level on which to apply the partitioning.
              minimum: 10
              maximum: 16
              example: 12
            clip:
              type: boolean
              description: Whether to clip the contained geometries to the boundaries of the tile
              example: true
    FeatureKeyPartitioning:
      allOf:
        - $ref: '#/components/schemas/OutputPartitioning'
        - type: object
          required:
            - key
          properties:
            type:
              description: The type is "FeatureKey"
              example: FeatureKey
              type: string
              enum:
                - FeatureKey
            key:
              type: string
              description: >
                A dot separated string to be used as JSON path
              example: mySubObject.myValue
    FileFormat:
      type: object
      discriminator:
        propertyName: type
        mapping:
          GeoJson: '#/components/schemas/GeoJsonFormat'
          GeoParquet: '#/components/schemas/GeoParquetFormat'
      required:
        - type
      properties:
        type:
          description: The type of the file format
          example: GeoJson
          type: string
    GeoJsonFormat:
      allOf:
        - $ref: '#/components/schemas/FileFormat'
        - type: object
          properties:
            type:
              description: The type is "GeoJson"
              example: GeoJson
              type: string
              enum:
                - GeoJson
            entityTypePerLine:
              type: string
              enum:
                - Feature
                - FeatureCollection
              example: Feature
            multiLineStandard:
              type: string
              enum:
                - RFC7464
                - NEW_LINE
              example: NEW_LINE
    GeoParquetFormat:
      allOf:
        - $ref: '#/components/schemas/FileFormat'
        - type: object
          properties:
            type:
              description: The type is "GeoParquet"
              example: GeoParquet
              type: string
              enum:
                - GeoParquet
    SpaceDataset:
      allOf:
        - $ref: '#/components/schemas/DatasetDescription'
        - type: object
          properties:
            type:
              description: The type is "Space"
              example: Space
              type: string
              enum:
                - Space
            id:
              type: string
    SourceSpaceDataset:
      allOf:
        - $ref: '#/components/schemas/SpaceDataset'
        - type: object
          properties:
            filters:
              $ref: '#/components/schemas/Filters'
    Filters:
      type: object
      description: An object to describe filters to be applied when reading data from a space
      properties:
        propertyFilter:
          type: string
          description: >
            The format should follow the specification below
              * p.property_name_1=property_value_1&f.special_property_name_1=special_property_value_1
  
  
            For example, the above query, the Features are filtered by
            'property' AND 'special property' equals to their respective values.
  
  
            While in the following example
              * p.property_name_1=value_1,value_2
  
  
            The resulting Features list contains all elements having value_1 OR value_2.
  
  
            Additionally, to the operators used in the examples above, the query can be written,
            with the same semantic, by using the long operators: "=gte=", "=lte=", "=gt=", "=lt=" and "=cs=".
            The following queries yield the same result:
              * p.property_name_1>=10
              * p.property_name_1=gte=10
  
  
            The available operators are:
              - "=" - equals
              - "!=" - not equals
              - "=.null" - is null
              - "!=.null" - is not null
              - ">=" or "=gte=" - greater than or equals
              - "<=" or "=lte=" - less than or equals
              - ">" or "=gt=" - greater than
              - "<" or "=lt=" - less than
              - "@>" or "=cs=" - Array contains
        spatialFilter:
          $ref: '#/components/schemas/SpatialFilter'
        context:
          $ref: '#/components/schemas/Context'
    Context:
      type: string
      enum:
        - DEFAULT
        - EXTENSION
        - SUPER
    SpatialFilter:
      type: object
      description: A geometrical object to be used as a filter when reading data from a space
      properties:
        radius:
          type: integer
          description: The radius around the filter-geometry in meters
        clip:
          type: boolean
          description: Whether to clip the matching geometries to the boundaries of the filter-geometry
        geometry:
          oneOf:
            - $ref: '#/components/schemas/Point'
            - $ref: '#/components/schemas/Polygon'
            - $ref: '#/components/schemas/LineString'
            - $ref: '#/components/schemas/MultiLineString'
            - $ref: '#/components/schemas/MultiPoint'
            - $ref: '#/components/schemas/MultiPolygon'
    ConnectorStatus:
      type: object
      description: A data holder for the status of a Connector
      example:
        type: ConnectorStatus
        initialized: true
        extensions:
          - postgis
          - dblink
        scriptVersions:
          h3: 100
          ext: 141
        maintenanceStatus:
          AUTO_INDEXING:
            maintainedAt: 1622531941945
            maintenanceRunning:
              - 1622531941945
    JobStatus:
      type: "object"
      description: "The runtime status of a job contains information about the job's execution and its results"
      properties:
        desiredAction:
          type: "string"
          enum:
            - "START"
            - "ABORT"
            - "RESUME"
        state:
          type: "string"
          enum:
            - "NOT_READY"
            - "SUBMITTED"
            - "PENDING"
            - "RESUMING"
            - "RUNNING"
            - "CANCELLING"
            - "CANCELLED"
            - "FAILED"
            - "SUCCEEDED"
        lastUpdatedAt:
          type: "integer"
          format: "int64"
        startedAt:
          type: "integer"
          format: "int64"
        estimatedProgress:
          type: "number"
          format: "float"
          minimum: 0
          maximum: 1
        estimatedEndTime:
          type: "integer"
          format: "int64"
      example:
        state: "RUNNING"
        lastUpdatedAt: 123456789
        startedAt: 123456789,
        estimatedProgress: 0.5
        estimatedEndTime: 123456789
    GeoJSON:
      type: object
      description: The base type for all possible GeoJSON objects.
      required:
        - type
      properties:
        type:
          type: string
        bbox:
          type: array
          description: Describes the coordinate range of the GeoJSON object.
          items:
            type: number
      discriminator:
        propertyName: type
        mapping:
          Geometry: '#/components/schemas/Geometry'
      additionalProperties: true
    Geometry:
      allOf:
        - $ref: '#/components/schemas/GeoJSON'
        - type: object
          description: A Geometry object represents points, curves, and surfaces in coordinate space.
          discriminator:
            propertyName: type
            mapping:
              MultiPoint: '#/components/schemas/MultiPoint'
              MultiLineString: '#/components/schemas/MultiLineString'
              LineString: '#/components/schemas/LineString'
              MultiPolygon: '#/components/schemas/MultiPolygon'
              Point: '#/components/schemas/Point'
              Polygon: '#/components/schemas/Polygon'
    LineString:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A LineString geometry.
          properties:
            type:
              description: The type is "LineString"
              example: LineString
              type: string
              enum:
                - LineString
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: number
                maxItems: 3
                minItems: 2
              minItems: 2
    MultiLineString:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A MultiLineString geometry.
          properties:
            type:
              description: The type is "MultiLineString"
              example: MultiLineString
              type: string
              enum:
                - MultiLineString
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: number
                  maxItems: 3
                  minItems: 2
                minItems: 2
    MultiPoint:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A MultiPoint geometry.
          properties:
            type:
              description: The type is "MultiPoint"
              example: MultiPoint
              type: string
              enum:
                - MultiPoint
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: number
                maxItems: 3
                minItems: 2
    MultiPolygon:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A MultiPolygon geometry.
          properties:
            type:
              description: The type is "MultiPolygon"
              example: MultiPolygon
              type: string
              enum:
                - MultiPolygon
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: array
                    items:
                      type: number
                    maxItems: 3
                    minItems: 2
                  minItems: 4
    Point:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A Point geometry.
          properties:
            type:
              description: The type is "Point"
              example: Point
              type: string
              enum:
                - Point
            coordinates:
              type: array
              items:
                type: number
              maxItems: 3
              minItems: 2
    Polygon:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A Polygon geometry.
          properties:
            type:
              description: The type is "Polygon"
              example: Polygon
              type: string
              enum:
                - Polygon
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: number
                  maxItems: 3
                  minItems: 2
                minItems: 4