openapi: 3.0.2
info:
  title: HERE HTTP-PSQL Connector
  description: |-
    HERE HTTP-PSQL Connector is a PSQL-Connector which provides a REST API to access data and maintain database related stuff. With the included Job API it is possible to perfrom Jobs (import/export..) on datasets.
  contact: {}
  version: 1.0.0
servers:
  - url: /
tags:
  - name: HTTP-Conncector
    description: Endpoint for Events
  - name: Connector-Maintenance
    description: Initialize or maintain underlying databases
  - name: Space-Maintenance
    description: Maintain database releated stuff on space level
paths:
  '/psql/event':
    post:
      tags:
        - HTTP-Conncector
      summary: Event Endpoint
      description: >-
        Process an Event.
      operationId: postEvent
      requestBody:
        description: Entire Event
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Connector Response
        '201':
          description: Connector Response
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/psql/health':
    get:
      tags:
        - HTTP-Conncector
      summary: Health-Check endpoint
      description: >-
        Performes a connector Health-Check
      operationId: getHealthCheck
      responses:
        '200':
          $ref: '#/components/responses/HealthResponse'
  '/psql/connectors/{connectorId}/status':
    get:
      tags:
        - Connector-Maintenance
      summary: Get status of Connector
      description: >-
        Get the status of a connector in focus of its configured underlying database.
      operationId: getStatus
      parameters:
        - $ref: '#/components/parameters/ConnectorIdP'
      responses:
        '200':
          $ref: '#/components/responses/ConnectorStatusResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/psql/connectors/{connectorId}/initialization':
    post:
      tags:
        - Connector-Maintenance
      summary:  Connector Initialization
      description: Initialize the underlying database from a connector
      operationId: postInitialization
      parameters:
        - $ref: '#/components/parameters/ConnectorIdP'
        - name: force
          in: query
          description: >-
            Force
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '405':
          $ref: '#/components/responses/ErrorResponse405'
  '/psql/connectors/{connectorId}/maintain/indices':
    post:
      tags:
        - Connector-Maintenance
      summary: Trigger Index Maintenance
      description: Maintain all Indices which are getting created automatically
      operationId: postMaintainIndices
      parameters:
        - $ref: '#/components/parameters/ConnectorIdP'
        - name: autoIndexing
          in: query
          description: >-
            Choose if AutoIndexing should get triggerd
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/psql/maintain/spaces/{spaceId}':
    get:
      tags:
        - Space-Maintenance
      summary: Get maintainance status of a Space
      description: Reteives information about the current maintenance status of a space.
      operationId: getMaintenanceStatusSpace
      parameters:
        - $ref: '#/components/parameters/SpaceId'
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
    post:
      tags:
        - Space-Maintenance
      summary: Trigger Space Maintenance
      description: Maintain all Indices which are required for a space
      operationId: postMaintainSpace
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - name: force
          in: query
          description: >-
            Force
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/psql/maintain/spaces/{spaceId}/purge':
    post:
      tags:
        - Space-Maintenance
      summary: Purge old versions of a space
      description: Delete outdated versions
      operationId: postPurgeVersions
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - name: minTagVersion
          in: query
          description: >-
            minTagVersion
          required: false
          schema:
            type: integer
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/spaces/{spaceId}/jobs':
    post:
      tags:
        - Manage Jobs
      summary: Create Job
      operationId: postJob
      parameters:
        - $ref: '#/components/parameters/SpaceId'
      requestBody:
        $ref: '#/components/requestBodies/JobRequest'
      responses:
        '201':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
    get:
      tags:
        - Manage Jobs
      summary: Get jobs
      description: Retrieve jobs
      operationId: getJobs
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/JobStatus'
      responses:
        '200':
          $ref: '#/components/responses/JobsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  '/spaces/{spaceId}/jobs/{jobId}':
    get:
      tags:
        - Manage Jobs
      summary: Get job
      description: Retrieve job
      operationId: getJob
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/JobId'
      responses:
        '200':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    patch:
      tags:
        - Manage Jobs
      summary: Update Job
      operationId: patchJob
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/JobId'
      requestBody:
        $ref: '#/components/requestBodies/JobRequest'
      responses:
        '200':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    delete:
      tags:
        - Manage Jobs
      summary: Delete job
      description: Delete job
      operationId: deleteJob
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/JobId'
        - $ref: '#/components/parameters/DeleteData'
      responses:
        '200':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  /spaces/{spaceId}/jobs/{jobId}/status:
    patch:
      tags:
        - "Manage Jobs"
      summary: "Update job status"
      description: "Update job status using provided action"
      operationId: "patchJobStatus"
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: "#/components/parameters/JobId"
      requestBody:
        $ref: "#/components/requestBodies/JobStatusRequest"
      responses:
        "202":
          $ref: "#/components/responses/JobStatusResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse400"
        "404":
          $ref: "#/components/responses/ErrorResponse404"
    get:
      tags:
        - "Manage Jobs"
      summary: "Get job status"
      description: "Retrieve job status"
      operationId: "getJobStatus"
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: "#/components/parameters/JobId"
      responses:
        "200":
          $ref: "#/components/responses/JobStatusResponse"
        "400":
          $ref: "#/components/responses/ErrorResponse400"
        "404":
          $ref: "#/components/responses/ErrorResponse404"
  '/psql/jobs':
    post:
      tags:
        - Jobs (deprecated)
      summary: Create Job
      operationId: postJobLegacy
      requestBody:
        description: Creates a new job.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '201':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
    get:
      tags:
        - Jobs (deprecated)
      summary: Get jobs
      description: Reteive jobs
      operationId: getJobsLegacy
      parameters:
        - $ref: '#/components/parameters/JobType'
        - $ref: '#/components/parameters/JobStatus'
        - $ref: '#/components/parameters/TargetSpaceId'
      responses:
        '200':
          $ref: '#/components/responses/JobsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
  '/psql/jobs/{jobId}':
    get:
      tags:
        - Jobs (deprecated)
      summary: Get job
      description: Reteive job
      operationId: getJobLegacy
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        '200':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    patch:
      tags:
        - Jobs (deprecated)
      summary: Update Job
      operationId: patchJobLegacy
      parameters:
        - $ref: '#/components/parameters/JobId'
      requestBody:
        description: Update a existing job.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '200':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    delete:
      tags:
        - Jobs (deprecated)
      summary: Delete job
      description: Delete job
      operationId: deleteJobLegacy
      parameters:
        - $ref: '#/components/parameters/JobId'
        - $ref: '#/components/parameters/DeleteData'
      responses:
        '200':
          $ref: '#/components/responses/JobResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  '/psql/jobs/{jobId}/execute':
    post:
      tags:
        - Jobs (deprecated)
      summary: Run Command
      description: Run Command on Job
      operationId: postExecuteLegacy
      parameters:
        - $ref: '#/components/parameters/JobId'
        - $ref: '#/components/parameters/UrlCount'
        - $ref: '#/components/parameters/Command'
      responses:
        '204':
          description : OK
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '412':
          $ref: '#/components/responses/ErrorResponse412'
components:
  parameters:
    JobId:
      name: jobId
      in: path
      description: The unique identifier of the job.
      required: true
      schema:
        type: string
    JobType:
      name: type
      in: query
      description: Type of Job
      required: false
      schema:
        type: string
        enum:
          - Import
          - Export
    JobStatus:
      name: status
      in: query
      description: Job Status
      required: false
      schema:
        type: string
        enum:
          - waiting
          - queued
          - validating
          - preparing
          - prepared
          - executing
          - executed
          - finalizing
          - finalized
          - aborted
          - failed
    TargetSpaceId:
      name: targetSpaceId
      in: query
      description: targetSpaceId
      required: false
      schema:
        type: string
    Command:
      name: command
      in: query
      description: Command
      required: true
      schema:
        type: string
        enum:
          - start
          - retry
          - abort
          - createUploadUrl
    UrlCount:
      name: urlCount
      in: query
      description: >-
        The number of upload URLs need to be created. It is only applicable when command=createUploadUrl.
        
        
        *Allowed range* : 1-1000
      required: false
      schema:
        type: number
        default: 1
        minimum: 1
        maximum: 1000
    DeleteData:
      name: deleteData
      in: query
      description: >-
        By setting deleteData=true also immediate deletion of import and export files is getting performed.
      required: false
      schema:
        type: boolean
    SpaceId:
      name: spaceId
      in: path
      description: The unique identifier of the space.
      required: true
      schema:
        type: string
    ConnectorIdP:
      name: connectorId
      in: path
      description: The unique identifier of the connector.
      required: true
      schema:
        type: string
    ConnectorId:
      name: connectorId
      in: query
      description: >-
        Provide ConnectorId
      required: true
      schema:
        type: string
    ECPS:
      name: ecps
      in: query
      description: >-
        Provide ECPS String
      required: true
      schema:
        type: string
    Passphrase:
      name: passphrase
      in: query
      description: >-
        Provide ECPS Passphrase
      required: false
      schema:
        type: string
  responses:
    EmptyResponse:
      description: >-
        An empty response as a result of a user-request with accepted MIME type application/x-empty.
      content:
        application/x-empty:
          schema:
            type: string
    ErrorResponse400:
      description: Malformed or Bad Request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: <Invalid request details>
    ErrorResponse404:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: The requested resource does not exist.
    ErrorResponse405:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: Method Not Allowed.
    ErrorResponse409:
      description: An error response which indicates a conflict.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: The record exists.
    ErrorResponse412:
      description: An error response which indicates a failed precondition.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: Precondition Failed.
    JobResponse:
      description: The Job
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Job'
    JobsResponse:
      description: Job List
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Job'
    HealthResponse:
      description: HealhCheck Response
      content:
        application/json:
          examples:
            response:
              value:
                status: OK
    ConnectorStatusResponse:
      description: ConnectorStatus Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectorStatus'
    JobStatusResponse:
      description: "The Job's runtime status"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobStatus"
  requestBodies:
    JobRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Job'
    JobStatusRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/JobStatus"
          example:
            desiredAction: "START"
  schemas:
    Error:
      type: object
      description: >-
        The response send when the request failed. This response may be send for
        certain HTTP error codes like 403 Forbidden or 502 Bad Gateway and
        should hold more details about the error reason.
      properties:
        streamId:
          description: >-
            A unique identifier of the request. This identifier should be
            provided when reporting errors. Its used to track requests
            through the XYZ platform.
          type: string
        type:
          type: string
          description: The type of the error. Defaults to 'ErrorResponse'.
        error:
          type: string
          description: The error summary.
        errorMessage:
          type: string
          description: >-
            A human readable message in English that should provide a more
            detailed description of the error reason.
    Event:
      type: object
      description: A data holder for features which points to a persistent storage.
      properties:
        type:
          description: >-
            The unique identifier of the event type
          example: HealthCheckEvent
          type: string
      example:
        type: HealthCheckEvent
        connectorParams:
          connectorId: test
          propertySearch: true
    Job:
      type: object
      description: Job
      properties:
        type:
          description: >-
            The unique identifier of the import type
          example: "Import"
          type: string
        id:
          description: >-
            id
          example: "ZMlfea"
          type: string
        targetSpaceId:
          description: >-
            targetSpaceId
          example: "importtest"
          type: string
        description:
          description: >-
            description
          example: "description"
          type: string
        csvFormat:
          description: >-
            csvFormat
          example: "JSON_WKB"
          type: string
      example:
        type: "Import"
        targetSpaceId: "12s4G4cw"
        description: "Job Description"
        csvFormat: "JSON_WKB"
    ConnectorStatus:
      type: object
      description: A data holder for the status of a Connector
      example:
        type: ConnectorStatus
        initialized: true
        extensions:
          - postgis
          - dblink
        scriptVersions:
          h3: 100
          ext: 141
        maintenanceStatus:
          AUTO_INDEXING:
            maintainedAt: 1622531941945
            maintenanceRunning:
              - 1622531941945
    JobStatus:
      type: "object"
      description: "The runtime status of a job contains information about the job's execution and its results"
      properties:
        desiredAction:
          type: "string"
          enum:
            - "START"
            - "ABORT"
            - "RESUME"
        state:
          type: "string"
          enum:
            - "NOT_READY"
            - "SUBMITTED"
            - "PENDING"
            - "RESUMING"
            - "RUNNING"
            - "CANCELLING"
            - "CANCELLED"
            - "FAILED"
            - "SUCCEEDED"
        lastUpdatedAt:
          type: "integer"
          format: "int64"
        startedAt:
          type: "integer"
          format: "int64"
        estimatedProgress:
          type: "number"
          format: "float"
          minimum: 0
          maximum: 1
        estimatedEndTime:
          type: "integer"
          format: "int64"
      example:
        state: "RUNNING"
        lastUpdatedAt: 123456789
        startedAt: 123456789,
        estimatedProgress: 0.5
        estimatedEndTime: 123456789