openapi: 3.0.1
info:
  description: HERE XYZ Hub is a REST API for simple access to geo data.
  title: HERE XYZ Hub
  version: 1.0.0
servers:
  - url: /hub
paths:
  '/spaces':
    get:
      tags:
        - Read Spaces
      summary: List spaces
      description: >-
        Lists the spaces, which the current authenticated user has access to.
      operationId: getSpaces
      parameters:
        - name: includeRights
          in: query
          description: >-
            If set to _true_, the access rights for each space are included in
            the response.
          required: false
          schema:
            type: boolean
            default: false
        - name: includeConnectors
          x-experimental: true
          in: query
          description: >-
            If set to _true_, the connectors for each space are included in
            the response.
          required: false
          schema:
            type: boolean
            default: false
        - name: owner
          in: query
          description: >
            Define the owner(s) of spaces to be shown in the response.

            Possible values are:


            * __me__ (_The default value;_ Show only the spaces being owned by
            the current user),

            * __(someOwnerId)__ (_Only for shared spaces:_ Explicitly only show
            spaces belonging to the specified user),

            * __others__ (Show only the spaces having been shared _excluding the
            own ones_),

            * __*__ (Show all spaces the current user has access to)
          required: false
          schema:
            type: string
            default: me
        - name: contentUpdatedAt
          x-experimental: true
          in: query
          description: >
            Additional space filter which compares the space's contentUpdatedAt timestamp with the one
            specified in the query, resulting in a subset of spaces.


            The usage of a comma (,) separating the timestamps, represents
            an OR operation.


            The format should follow the specification below
              * ?contentUpdatedAt=timestamp

            While in the following example
              * ?contentUpdatedAt=timestamp_1,timestamp_2


            The resulting spaces list will contain all contentUpdatedAt having timestamp_1 OR timestamp_2


            The available operators are:
              - "=" - equals
              - "!=" - not equals
              - ">=" or "=gte=" - greater than or equals
              - "<=" or "=lte=" - less than or equals
              - ">" or "=gt=" - greater than
              - "<" or "=lt=" - less than
          required: false
          schema:
            type: string
            example: 1597092085740
      responses:
        '200':
          $ref: '#/components/responses/SpacesResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
    post:
      tags:
        - Edit Spaces
      summary: Create a space
      description: Creates a new space.
      operationId: postSpace
      requestBody:
        $ref: '#/components/requestBodies/Space'
      responses:
        '200':
          $ref: '#/components/responses/SpaceResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                type: ErrorResponse
                streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
                error: Exception
                errorMessage: The record exists.
        '413':
          $ref: '#/components/responses/ErrorResponse413'
  '/spaces/{spaceId}':
    get:
      tags:
        - Read Spaces
      summary: Get a space by ID
      description: Returns the space definition
      operationId: getSpace
      parameters:
        - $ref: '#/components/parameters/SpaceId'
      responses:
        '200':
          $ref: '#/components/responses/SpaceResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    patch:
      tags:
        - Edit Spaces
      summary: Update a space
      description: Updates a space.
      operationId: patchSpace
      parameters:
        - $ref: '#/components/parameters/SpaceId'
      requestBody:
        $ref: '#/components/requestBodies/Space'
      responses:
        '200':
          $ref: '#/components/responses/SpaceResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
    delete:
      tags:
        - Edit Spaces
      summary: Delete a space
      description: >-
        Deletes a space configuration. The data of the space may or may not be
        deleted, depending on the underlying storage provider.
      operationId: deleteSpace
      parameters:
        - $ref: '#/components/parameters/SpaceId'
      responses:
        '200':
          $ref: '#/components/responses/SpaceResponse'
        '204':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  '/spaces/{spaceId}/features':
    get:
      tags:
        - Read Features
      summary: Get features by ID
      description: >-
        Returns all of the features found for the provided list of ids. The
        response is always a FeatureCollection, even if there are no features
        with the provided ids.
      operationId: getFeatures
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/RequiredIdList'
        - $ref: '#/components/parameters/PropertiesSelection'
        - $ref: '#/components/parameters/Force2D'
      responses:
        '200':
          content:
            application/geo+json:
              schema:
                $ref: '#/components/schemas/FeatureCollectionResponse'
          description: >-
            The FeatureCollection containing all of the features, found for the
            provided list of ids.
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    put:
      tags:
        - Edit Features
      summary: Create or replace multiple features
      description: Create or replace the provided features.
      operationId: putFeatures
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/AddTags'
        - $ref: '#/components/parameters/RemoveTags'
      requestBody:
        $ref: '#/components/requestBodies/FeatureCollection'
      responses:
        '200':
          $ref: '#/components/responses/ModifyFCResponse'
        '204':
          $ref: '#/components/responses/EmptyResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '413':
          $ref: '#/components/responses/ErrorResponse413'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    post:
      tags:
        - Edit Features
      summary: Modify features in the space.
      description: Create or patch features.
      x-experimental-description: >
        This method allows to create, update and delete features. The behavior
        of the POST handler is controlled by three query parameters described in
        detail below. The name of the parameter reflects a condition to be
        matched. Its value reflects the corresponding action to be performed for
        this case.


        If no values are provided, the request is handled with the default
        values:


        ```


        ne=create&e=patch&transactional=true


        ```


        The three parameters and their possible values are:


        ### _ne_ - If Not Exists


        If no feature with the provided ID exists, or if the provided feature
        contains no ID, then one of the following actions can be used:


        * __create__  (default) - A new object is created.


        * __retain__ - No action is executed, allowing the execution of the
        batch operation to continue, even if the _transactional_ parameter is
        set to _true_.


        * __error__ - If no object with the provided ID exists, an error is
        raised, which would result in the whole batch operation to be aborted,
        if the _transactional_ parameter is set to _true_.


        ### _e_ - If Exists


        If an object with the provided ID exists, and _history_ is enabled for
        the space, there are 2 states which could be taken into account:

            1. The __ORIGIN__ state - the state that the client received and modified. The state is retrieved by using the value of the root attribute _guid_.

            2. The __HEAD__ state - the current state of the object in the space, including any changes applied to it in the meantime.


        The possible operations in detail:


        * __patch__  (default) - The feature object is handled as a _partial
        update object_. Therefore it could contain only the properties, which
        should be modified. Properties, which do not exist in the HEAD state of
        the object are inserted, the values for all existing properties are
        updated, unless the value of the property is set to _null_ , which will
        result in the property being removed from the object.

            If an _ORIGIN_ state is specified in the _partial update object_ and it is not the same as the _HEAD_ state, the patch is applied to the _HEAD_ state, but only in case that the differnce between _ORIGIN_ and _HEAD_ contains no conflicting changes( i.e. only different properties were modified ). Otherwise an error is raised, which will result in the batch operation being aborted, if the _transactional_ parameter is set to _true_.

        * __replace__ - If an object with the provided ID exists, it will be
        replaced with the provided feature object. If the _ORIGIN_ state is
        specified in the provided feature and differs from the _HEAD_ state,
        then a error is raised.


        * __merge__ - The provided feature object is handled as a full object
        version and not a partial update. If an _ORIGIN_ state is specified in
        the feature and it is not the same as the _HEAD_ state, the difference
        between the _ORIGIN_ state and provided version to the _HEAD_ state, but
        only in the case that the differnce between _ORIGIN_ and _HEAD_ contains
        no conflicting changes. Otherwise an error is raised, which will result
        in the batch operation being aborted, if the _transactional_ parameter
        is set to _true_.


        * __delete__ - The feature with the provided is deleted.


        * __retain__ - The current state of the feature is retained and included
        in the response.


        * __error__ - Raises an error, if the object already exists.


        ### transactional - Transactional batch operation


        Defines, if modifying of the features, is executed as a single
        transactional batch operation (_true_:default) or as independent
        operations (_false_).

        There is a limit of 10 megs of data allowed for this operation.
      operationId: postFeatures
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/AddTags'
        - $ref: '#/components/parameters/RemoveTags'
        - $ref: '#/components/parameters/IfExists'
          x-experimental: true
        - $ref: '#/components/parameters/IfNotExists'
          x-experimental: true
        - $ref: '#/components/parameters/ConflictResolution'
          x-experimental: true
        - $ref: '#/components/parameters/Transactional'
          x-experimental: true
        - $ref: '#/components/parameters/PrefixId'
          x-experimental: true
      requestBody:
        $ref: '#/components/requestBodies/FeatureCollectionOrFeatureModificationList'
      responses:
        '200':
          $ref: '#/components/responses/ModifyFCResponse'
        '204':
          $ref: '#/components/responses/EmptyResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '413':
          $ref: '#/components/responses/ErrorResponse413'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    delete:
      tags:
        - Edit Features
      summary: Delete multiple features from the space.
      description: The wildcard sign(*) could be used to delete all features in the space.
      operationId: deleteFeatures
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/IdList'
        - $ref: '#/components/parameters/TagList'
      responses:
        '200':
          $ref: '#/components/responses/ModifyFCResponse'
        '204':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  '/spaces/{spaceId}/features/{featureId}':
    get:
      tags:
        - Read Features
      summary: Get a feature by ID
      description: Retrieves the feature with the provided identifier.
      operationId: getFeature
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/FeatureId'
        - $ref: '#/components/parameters/PropertiesSelection'
        - $ref: '#/components/parameters/Force2D'
      responses:
        '200':
          $ref: '#/components/responses/SingleFeatureResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    put:
      tags:
        - Edit Features
      summary: Create or replace a feature
      description: Creates or replaces a feature in the space.
      operationId: putFeature
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/FeatureId'
        - $ref: '#/components/parameters/AddTags'
        - $ref: '#/components/parameters/RemoveTags'
      requestBody:
        $ref: '#/components/requestBodies/Feature'
      responses:
        '200':
          $ref: '#/components/responses/SingleFeatureResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '413':
          $ref: '#/components/responses/ErrorResponse413'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    patch:
      tags:
        - Edit Features
      summary: Patch a feature
      description: Patches an existing feature.
      operationId: patchFeature
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/FeatureId'
        - $ref: '#/components/parameters/AddTags'
        - $ref: '#/components/parameters/RemoveTags'
      requestBody:
        $ref: '#/components/requestBodies/Feature'
      responses:
        '200':
          $ref: '#/components/responses/SingleFeatureResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
        '409':
          $ref: '#/components/responses/ErrorResponse409'
        '413':
          $ref: '#/components/responses/ErrorResponse413'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    delete:
      tags:
        - Edit Features
      summary: Deletes a feature
      description: Deletes an existing feature.
      operationId: deleteFeature
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/FeatureId'
      responses:
        '204':
          $ref: '#/components/responses/EmptyResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  '/spaces/{spaceId}/statistics':
    get:
      tags:
        - Read Features
      summary: Get statistics.
      description: Returns statistical information about this space.
      operationId: getStatistics
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/SkipCache'
      responses:
        '200':
          $ref: '#/components/responses/StatisticsResponse'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  '/spaces/{spaceId}/bbox':
    get:
      tags:
        - Read Features
      summary: Get features in bounding box
      operationId: getFeaturesByBBox
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - name: west
          in: query
          description: >-
            The longitude in WGS'84 decimal degree (-180 to +180) of the west
            (left) border of the bounding box.
          required: true
          schema:
            type: number
            format: double
        - name: north
          in: query
          description: >-
            The latitude in WGS'84 decimal degree (-90 to +90) of the north
            (top) border of the bounding box.
          required: true
          schema:
            type: number
            format: double
        - name: east
          in: query
          description: >-
            The longitude in WGS'84 decimal degree (-180 to +180) of the east
            (right) border of the bounding box.
          required: true
          schema:
            type: number
            format: double
        - name: south
          in: query
          description: >-
            The latitude in WGS'84 decimal degree (-90 to +90) of the south
            (bottom) border of the bounding box.
          required: true
          schema:
            type: number
            format: double
        - $ref: '#/components/parameters/TagList'
        - $ref: '#/components/parameters/Clip'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/PropertiesQuery'
        - $ref: '#/components/parameters/PropertiesSelection'
        - $ref: '#/components/parameters/SkipCache'
        - $ref: '#/components/parameters/Clustering'
        - $ref: '#/components/parameters/ClusteringParams'
        - $ref: '#/components/parameters/Tweaks'
          x-experimental: true
        - $ref: '#/components/parameters/TweaksParams'
          x-experimental: true
        - $ref: '#/components/parameters/Force2D'
      responses:
        '200':
          $ref: '#/components/responses/QueryFCResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/spaces/{spaceId}/tile/{type}/{tileId}':
    get:
      tags:
        - Read Features
      summary: Get features in tile
      x-experimental-description: |
        List the features selected by tile type and tile id.

        One of the tile types can be used:
          * quadkey
          * web
          * tms
          * here


      operationId: getFeaturesByTile
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - name: type
          in: path
          description: >-
            The type of tile identifier. "quadkey" - Virtual Earth, "web" - Web
            Mercator, "tms" - OSGEO Tile Map Service, "here" - Here Tile Schema.
          required: true
          schema:
            type: string
            enum:
              - quadkey
              - web
              - tms
              - here
            default: quadkey
        - name: tileId
          in: path
          description: >-
            The tile identifier can be provided as quadkey (__1__), Web Mercator
            level,x,y coordinates (__1_1_0__) or OSGEO Tile Map Service
            level,x,y (__1_1_0__).
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/TagList'
        - $ref: '#/components/parameters/Clip'
        - $ref: '#/components/parameters/PropertiesQuery'
        - $ref: '#/components/parameters/PropertiesSelection'
        - $ref: '#/components/parameters/SkipCache'
        - $ref: '#/components/parameters/Clustering'
        - $ref: '#/components/parameters/ClusteringParams'
        - $ref: '#/components/parameters/Tweaks'
          x-experimental: true
        - $ref: '#/components/parameters/TweaksParams'
          x-experimental: true
        - name: margin
          in: query
          description: >-
            Margin in pixels on the respective projected level around the tile.
            Default is 0.
          required: false
          schema:
            type: integer
            minimum: 0
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Force2D'
        - $ref: '#/components/parameters/Mode'
        - $ref: '#/components/parameters/VizSampling'
      responses:
        '200':
          $ref: '#/components/responses/TileResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/spaces/{spaceId}/spatial':
    get:
      tags:
        - Read Features
      summary: Get features with radius search
      operationId: getFeaturesBySpatial
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - name: lat
          in: query
          description: >-
            The latitude in WGS'84 decimal degree (-90 to +90) of the center Point.
          schema:
            type: number
            format: double
        - name: lon
          in: query
          description: >-
            The longitude in WGS'84 decimal degree (-180 to +180) of the center Point.
          schema:
            type: number
            format: double
        - name: refSpaceId
          in: query
          description: >-
            As alternative for defining center coordinates, it is possible to reference a geometry in a space. Therefore it is needed to provide the Id of space where the referenced feature is stored. Always to use in combination with refFeatureId.
          schema:
            type: string
        - name: refFeatureId
          in: query
          description: >-
            The unique identifier of a feature in the referenced space. The geometry of that feature gets used for the spatial query. Always to use in combination with refSpaceId.
          schema:
            type: string
        - name: radius
          in: query
          description: >-
            Radius in meter which defines the diameter of the search request.
          schema:
            type: integer
        - $ref: '#/components/parameters/TagList'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/PropertiesQuery'
        - $ref: '#/components/parameters/PropertiesSelection'
        - $ref: '#/components/parameters/SkipCache'
        - $ref: '#/components/parameters/Force2D'
      responses:
        '200':
          $ref: '#/components/responses/QueryFCResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
    post:
      tags:
        - Read Features
      summary: Get features which intersects the provided geometry
      operationId: getFeaturesBySpatialPost
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - name: radius
          in: query
          description: >-
            Radius in meter to thicken input geometry.
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/TagList'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/PropertiesQuery'
        - $ref: '#/components/parameters/PropertiesSelection'
        - $ref: '#/components/parameters/SkipCache'
        - $ref: '#/components/parameters/Force2D'
      requestBody:
        description: A Geometry object which is getting used for the spatial search.
        content:
          application/geo+json:
            schema:
              $ref: '#/components/schemas/Geometry'
      responses:
        '200':
          $ref: '#/components/responses/QueryFCResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/spaces/{spaceId}/search':
    get:
      tags:
        - Read Features
      summary: Search for features
      description: >-
        Searches for features in the space. The results are unordered and the
        request does not allow to continue the search, which is the main
        difference when compared to the _iterate_ request.
      operationId: searchForFeatures
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/TagList'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/PropertiesQuery'
        - $ref: '#/components/parameters/PropertiesSelection'
        - $ref: '#/components/parameters/SkipCache'
        - $ref: '#/components/parameters/Force2D'
      responses:
        '200':
          $ref: '#/components/responses/QueryFCResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/spaces/{spaceId}/iterate':
    get:
      tags:
        - Read Features
      summary: Iterate features in the space.
      description: >-
        Iterates all of the features in the space. The features in the response
        are ordered so that no feature is returned twice. If there are more
        features, which could be loaded, the response FeatureCollection will
        contain the root attribute _handle_. The value of this attribute can
        be passed as a query parameter for the following request in order to
        continue the iteration from the marked position.
      operationId: iterateFeatures
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/PropertiesSelection'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/SkipCache'
        - $ref: '#/components/parameters/Handle'
        - $ref: '#/components/parameters/Force2D'
      responses:
        '200':
          $ref: '#/components/responses/IterateResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/spaces/{spaceId}/count':
    x-deprecated: true
    get:
      tags:
        - Read Features
      summary: Get feature count.
      description: >-
        Returns the feature count of all features in the space or the count for
        the provided combination of tags
      operationId: getFeaturesCount
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/TagList'
      responses:
        '200':
          $ref: '#/components/responses/CountFeaturesResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
  '/spaces/{spaceId}/history':
    x-experimental: true
    get:
      tags:
        - Read History
      summary: Get historical data.
      description: |
        Get  all features in a given version range.

        Based on the Accept-Header (vnd.here.changeset-collection or vnd.here.compact-changeset)
        the result will be a Changeset-Collection or a CompactChangeset.

        The former result type contains each of the changes between start version and end version
        grouped by version which can be used for easily navigate across all modifications which
        happened on the referring layer.

        While the latter contains only the latest state of each feature which is within the start
        and end version range.

        The Space needs to have "enableHistory=true" setting.
      operationId: iterateHistory
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/StartVersion'
        - $ref: '#/components/parameters/EndVersion'
        - $ref: '#/components/parameters/PageToken'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/SkipCache'
      responses:
        '200':
          $ref: '#/components/responses/HistoryResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '513':
          $ref: '#/components/responses/ErrorResponse513'
  '/spaces/{spaceId}/history/statistics':
    x-experimental: true
    get:
      tags:
        - Read History
      summary: Get history statistics.
      description: Returns statistical information about this history. The Space needs to have "enableGolbalVersioning=true" setting.
      operationId: getHistoryStatistics
      parameters:
        - $ref: '#/components/parameters/SpaceId'
        - $ref: '#/components/parameters/SkipCache'
      responses:
        '200':
          $ref: '#/components/responses/HistoryStatisticsResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  '/connectors':
    x-experimental: true
    get:
      tags:
        - Read Connectors
      summary: List connectors
      description: >-
        Lists the connectors, which the current authenticated user has access to.
      operationId: getConnectors
      responses:
        '200':
          $ref: '#/components/responses/ConnectorsResponse'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    post:
      tags:
        - Edit Connectors
      summary: Create a connector
      description: Creates a new connector.
      operationId: postConnector
      requestBody:
        $ref: '#/components/requestBodies/ConnectorConfig'
      responses:
        '200':
          $ref: '#/components/responses/ConnectorResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
  '/connectors/{connectorId}':
    x-experimental: true
    get:
      tags:
        - Read Connectors
      summary: Get a connector by ID
      description: Returns the connector definition
      operationId: getConnector
      parameters:
        - $ref: '#/components/parameters/ConnectorId'
      responses:
        '200':
          $ref: '#/components/responses/ConnectorResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    put:
      tags:
        - Edit Connectors
      summary: Replace a connector
      description: Replace a connector.
      operationId: putConnector
      parameters:
        - $ref: '#/components/parameters/ConnectorId'
      requestBody:
        $ref: '#/components/requestBodies/ConnectorConfig'
      responses:
        '200':
          $ref: '#/components/responses/ConnectorResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    patch:
      tags:
        - Edit Connectors
      summary: Update a connector
      description: Updates a connector.
      operationId: patchConnector
      parameters:
        - $ref: '#/components/parameters/ConnectorId'
      requestBody:
        $ref: '#/components/requestBodies/ConnectorConfig'
      responses:
        '200':
          $ref: '#/components/responses/ConnectorResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
    delete:
      tags:
        - Edit Connectors
      summary: Delete a connector
      description: >-
        Deletes a connector configuration.
      operationId: deleteConnector
      parameters:
        - $ref: '#/components/parameters/ConnectorId'
      responses:
        '200':
          $ref: '#/components/responses/ConnectorResponse'
        '400':
          $ref: '#/components/responses/ErrorResponse400'
        '401':
          $ref: '#/components/responses/ErrorResponse401'
        '403':
          $ref: '#/components/responses/ErrorResponse403'
        '404':
          $ref: '#/components/responses/ErrorResponse404'
components:
  parameters:
    AddTags:
      name: addTags
      in: query
      description: Tags to be added to the features.
      required: false
      style: form
      schema:
        type: array
        items:
          type: string
    Clip:
      name: clip
      in: query
      description: >-
        If set to _true_ the features' geometries are clipped to the geometry of
        the tile or bounding box. Default is _false_.
      required: false
      schema:
        type: boolean
    ConnectorId:
      x-experimental: true
      name: connectorId
      in: path
      description: The unique identifier of the connector.
      required: true
      schema:
        type: string
    SkipCache:
      name: skipCache
      in: query
      description: >-
        If set to _true_ the response is not returned from cache. Default is _false_.
      required: false
      schema:
        type: boolean
    FeatureId:
      name: featureId
      in: path
      description: The unique identifier of a feature in the space.
      required: true
      schema:
        type: string
    IdList:
      name: id
      in: query
      description: A comma separated list of unique feature identifiers.
      style: form
      schema:
        type: array
        items:
          type: string
    IfExists:
      x-experimental: true
      name: e
      in: query
      description: >-
        The action to execute, when a feature with the provided ID exists.
        Default is _patch_
      required: false
      schema:
        $ref: '#/components/schemas/OnFeatureExists'
    IfNotExists:
      x-experimental: true
      name: ne
      in: query
      description: >-
        The action to execute, when a feature with the provided ID does not
        exist or the feature contains no ID. Default is _create_
      required: false
      schema:
        $ref: '#/components/schemas/OnFeatureNotExists'
    ConflictResolution:
      x-experimental: true
      name: cr
      in: query
      description: >-
        The resolution strategy when a conflicting update of the same attribute occurs.
        To keep the value of the head state select _retain_.
        To overwrite the value of the head state select _replace_.
        To abort the entry update select _error_.
      required: false
      schema:
        $ref: '#/components/schemas/OnMergeConflict'
    Handle:
      name: handle
      in: query
      description: >-
        The handle to continue the iteration.
      required: false
      schema:
        type: string
    PageToken:
      x-experimental: true
      name: pageToken
      in: query
      description: >-
        The nextPageToken to continue the iteration.
      required: false
      schema:
        type: string
    Version:
      x-experimental: true
      name: version
      in: query
      description: Define a version [feature version <= query version]
      required: false
      schema:
        type: integer
    StartVersion:
      x-experimental: true
      name: startVersion
      in: query
      description: Define start of version-range [version >= startVersion]
      required: false
      schema:
        type: integer
    EndVersion:
      x-experimental: true
      name: endVersion
      in: query
      description: Define end of version-range [version <= endVersion]
      required: false
      schema:
        type: integer
    Limit:
      name: limit
      in: query
      description: The maximum number of features in the response. Default is _30000_
      required: false
      schema:
        type: integer
    Tweaks:
      x-experimental: true
      name: tweaks
      in: query
      x-experimental-description: >-
        Providing this query parameter only a subset of the data will be returned. This can be used for rendering higher zoom levels.

        Possible values are:

          * "sampling"
            Delivery of geometry distributed data-samples.

          * "simplification"
            Delivery of simplified geometries

      required: false
      schema:
        type: string
        enum:
          - sampling
          - simplification
          - ensure
    TweaksParams:
      x-experimental: true
      name: tweaksParams
      in: query
      required: false
      x-experimental-description: |
        Providing this query parameter only a subset of the data will be returned. This can be used for rendering higher zoom levels.

        ### Tweaks-Parameter reference

        **Tweaks-type: "sampling":**

        With the strength parameter it is possibile to control the behavior of the tweaks-sampling algorithm.

        | Parameter   | Type    | Mandatory | Meaning                                                               |
        |-------------|---------|-----------|-----------------------------------------------------------------------|
        | algorithm   | String  | NO        | distribution, geometrysize     |
        | strength    | String  | NO        | Use presets: low, lowmed, med, medhigh, high or define strengh in percentage 1-100     |

        **Tweaks-type: "simplification":**

        With the strength parameter it is possibile to control the behavior of the tweaks-simplification algorithm.

        | Parameter   | Type    | Mandatory | Meaning                                                               |
        |-------------|---------|-----------|-----------------------------------------------------------------------|
        | algorithm   | String  | NO        | grid, gridbytilelevel, simplifiedkeeptopology, simplified, merge, linemerge |
        | strength    | String  | NO        | Use presets: low, med, high or define strengh in percentage 1-100     |

        **Tweaks-type: "ensure":**

        | Parameter   | Type    | Mandatory | Meaning                                                               |
        |-------------|---------|-----------|-----------------------------------------------------------------------|
        | defaultselection | boolean  | NO        | use standard selection behaviour  [default: false]              |
        | samplingthreshold | Number  | NO        | integer 10-100, size of samples (x1000) [default: 10]           |

      style: form
      explode: true
      schema:
        type: object
        example:
          tweaks.strength: "1-100 | [low,lowmed,med,medhigh,high]"
        additionalProperties:
          type: string
    Clustering:
      name: clustering
      in: query
      description: >-
        The clustering algorithm to apply to the data within the result.
        Providing this query parameter the data will be returned in a clustered way.
        This means the data won't necessarily be returned in its original shape or with its
        original properties.

        Depending on the chosen clustering algorithm there could be different mandatory and/or
        optional parameters to specify the behavior of the algorithm.

        Possible values are:

          * "hexbin"

            The hexbin algorithm divides the world in hexagonal "bins" on a specified resolution.
            Each hexagon has an address being described by the H3 addressing scheme.
            For more information on that topic see: https://eng.uber.com/h3/

          * "quadbin"

            The quadbin algorithm takes the geometry input from the request (e.g. quadkey / bbox..)
            and count the features in it. This clustering mode works also for very large spaces and
            can be used for getting an overview where data is present in a given space. Furthermore,
            a property filter on one property is applicable.
      required: false
      schema:
        type: string
        enum:
          - hexbin
          - quadbin
    ClusteringParams:
      name: clusteringParams
      in: query
      required: false
      description: |
        Some parameters for the chosen clustering algorithm.

        Depending on the chosen clustering algorithm there could be different mandatory and/or
        optional parameters to specify the behavior of the algorithm.

        ### Clustering-Parameter reference

        NOTE: The actual query parameters in the URL are looking like: `?clustering.aParameterName=aValue`

        **Clustering-type: "hexbin":**

        There are several parameters needed by the H3 based hexbin algorithm.
        For more information on that topic see: https://eng.uber.com/h3/

        | Parameter   | Type    | Mandatory | Meaning                                                               |
        |-------------|---------|-----------|-----------------------------------------------------------------------|
        | absoluteResolution  | Number  | NO        | integer, The H3 hexagon resolution [0,13]                      |
        | resolution  | Number  | NO        | deprecated, renamed to absoluteResolution                             |
        | relativeResolution | Number  | NO        | integer value [-2,2] to be added to current used resolution  |
        | property    | String  | NO        | A property of the original features for which to calculate statistics |
        | pointmode   | Boolean | NO        | retuns the centroid of hexagons as geojson feature                    |
        | singlecoord | Boolean | NO        | force to evaluate the first object coordinate only (default: false)   |
        | sampling    | String  | NO        | samplingratio of underlying dataset  |
        |             |         |           | string value [off (1/1), low (1/8), lowmed (1/32), med (1/128), medhigh (1/1024), high (1/4096)] (default: off) |

        **Clustering-type: "quadbin":**

        There are several parameters needed by the quadbin algorithm. You can use one property filter in combination.

        | Parameter   | Type    | Mandatory | Meaning                                                               |
        |-------------|---------|-----------|-----------------------------------------------------------------------|
        | relativeResolution | Number  | NO        | integer, The quad resolution [0,4]                                             |
        | noBuffer    | Boolean | NO        | do not place a buffer around quad polygons, default: false            |
        | resolution  | Number  | NO        | deprecated, renamed to resolutionRelative             |
        | countmode   | String  | NO        | [real, estimated, mixed]                                    |
        |             |         |           | real = real feature counts. Best accuracy, but slow.                  |
        |             |         |           |     Not recommended for big result sets                       |
        |             |         |           |                                                                       |
        |             |         |           | estimated = estimated feature counts. Low accuracy, but very fast      |
        |             |         |           |     Recommended for big result sets                           |
        |             |         |           |                                                                       |
        |             |         |           | mixed (default) = estimated feature counts combined with real ones.   |
        |             |         |           |     If the estimation is low a real count gets applied. Fits to the |
        |             |         |           |     most use cases                                        |
      style: form
      explode: true
      schema:
        type: object
        example:
          clustering.resolution: 3
          clustering.property: "a.nested.property"
        additionalProperties:
          type: string
    PrefixId:
      x-experimental: true
      name: prefixId
      in: query
      description: If set all feature IDs are prefixed with the provided string
      required: false
      schema:
        type: string
    RemoveTags:
      name: removeTags
      in: query
      description: Tags to be removed from the features.
      required: false
      style: form
      schema:
        type: array
        items:
          type: string
    RequiredIdList:
      name: id
      in: query
      description: A comma separated list of unique feature identifiers.
      required: true
      style: form
      schema:
        type: array
        items:
          type: string
    SpaceId:
      name: spaceId
      in: path
      description: The unique identifier of the space.
      required: true
      schema:
        type: string
    TagList:
      name: tags
      in: query
      description: >-
        A comma separated list of tags or combination of tags concatenated with
        a plus sign (+). A comma separated list of tags means any tag may be
        found. A plus sign concatenated list means every tag is required.
      allowEmptyValue: true
      allowReserved: true
      style: form
      schema:
        type: array
        items:
          type: string
    PropertiesQuery:
      name: params
      in: query
      description: >
        Additional feature filters which compares the feature's property's value with the one
        specified in the query, resulting in a subset of features.


        The usage of multiple property names represents an AND operation.
        The usage of a comma (,) separating the properties values, represents
        an OR operation.


        The format should follow the specification below
          * ?p.property_name_1=property_value_1&f.special_property_name_1=special_property_value_1


        For example, the above query, the Features will be filtered by
        'property' AND 'special property' equals to their respective values.


        While in the following example
          * ?p.property_name_1=value_1,value_2


        The resulting Features list will contain all elements having value_1 OR value_2

        The available operators are:
          - "=" - equals
          - "!=" - not equals
          - ">=" or "=gte=" - greater than or equals
          - "<=" or "=lte=" - less than or equals
          - ">" or "=gt=" - greater than
          - "<" or "=lt=" - less than
          - "@>" or "=cs=" - Array contains
      style: form
      explode: true
      schema:
        type: object
        example:
          p.myProperty: "someValue"
          p.otherProperty: 5
        additionalProperties:
          type: string
    PropertiesSelection:
      name: selection
      in: query
      description: >
        A list of properties to be returned in the features result list. Multiple attributes can be
        specified by using comma(,). Example: ?selection=p.name,p.capacity,p.color,rootpropertyname
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Transactional:
      x-experimental: true
      name: transactional
      in: query
      description: Defines, if this is a transactional operation. Default is _true_.
      required: false
      schema:
        type: boolean
    Force2D:
      name: force2D
      in: query
      description: >-
        If set to _true_ the features in the response will have only X's and Y's as coordinates.
      required: false
      schema:
        type: boolean
    Mode:
      name: mode
      in: query
      description: >-
        optimize resultset and geometries for dispaly. mode = [raw|viz]


        Note: when using mode=viz, then the value of "limit" parameter will be set to its max value (100000) if not specified otherwise.
      required: false
      schema:
        type: string
        enum:
          - raw
          - viz

    VizSampling:
      name: vizSampling
      in: query
      description: >-
        Choose sampling strength in case of mode = viz.  vizSampling = [low|med|high|off] - default:med
      required: false
      schema:
        type: string
        enum:
          - low
          - med
          - high
          - "off"

  responses:
    CountFeaturesResponse:
      x-deprecated: true
      description: The number of features in a spaces, optionally counted by tag(s).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CountResponse'
    ErrorResponse400:
      description: Malformed or Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: <Invalid request details>
    ErrorResponse401:
      description: Unauthorized to perform the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ErrorResponse403:
      description: Forbidden request. Insufficient rights to perform the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: Insufficient rights + <Request specific access error details>
    ErrorResponse404:
      description: Not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: The requested resource does not exist.
    ErrorResponse409:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: <Error specific message>
    ErrorResponse413:
      description: Request entity too large.
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ErrorResponse513:
      description: Response payload too large
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: ErrorResponse
            streamId: 7480e28a-e273-11e8-9af8-7508bbe361d9
            error: Exception
            errorMessage: The response payload was too large. Please try to reduce the expected amount of data.
    EmptyResponse:
      description: >-
        An empty response (as a result of a user-request with accepted MIME type application/x-empty).
      content:
        application/x-empty:
          schema:
            type: string
          example: ''
    ModifyFCResponse:
      description: A FeatureCollection, containing all modified features.
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureCollectionResponse'
          example:
            type: FeatureCollection
            etag: b9be03f253c53c23
            inserted:
              - BfiimUxHjj
            updated:
              - cuiImUxOjj
            features:
              - type: Feature
                id: BfiimUxHjj
                geometry:
                  type: Point
                  coordinates:
                    - -2.960847
                    - 53.430828
                properties:
                  name: Anfield
                  '@ns:com:here:xyz':
                    createdAt: 1517504700726
                    updatedAt: 1517504700726
                    space: 0FzlE2wX
                    tags:
                      - football
                      - stadium
                  amenity: Football Stadium
                  capacity: 54074
                  description: Home of Liverpool Football Club
        application/x-empty:
          schema:
            type: string
          example: ''
    QueryFCResponse:
      description: >-
        A FeatureCollection, containing all features found for the provided
        parameters.
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureCollectionResponse'
    HistoryResponse:
      x-experimental: true
      description: >-
        Changesets which are containing FeatureCollections grouped by operation/versions.
      content:
        application/vnd.here.changeset-collection:
          schema:
            $ref: '#/components/schemas/ChangesetCollectionResponse'
        application/vnd.here.compact-changeset:
          schema:
            $ref: '#/components/schemas/CompactChangesetResponse'
    IterateResponse:
      description: >-
        A FeatureCollection with handle, containing all features found for the provided
        parameters.
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureCollectionIterable'
    TileResponse:
      description: >-
        A FeatureCollection, containing all features found for the provided parameters.
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureCollectionResponse'
        application/vnd.mapbox-vector-tile:
          x-experimental: true
          schema:
            type: string
            format: binary
          example: ''
    SingleFeatureResponse:
      description: The GeoJSON feature.
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureResponse'
    SpaceResponse:
      description: The space
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Space'
          examples:
            response:
              value:
                id: 0FzlE2wX
                title: My Demo Space
                description: Description as markdown
                owner: HERE-12345678-1234-1111-1234-1234432112344321
                cid: dX0BH75QE8paCVQr8MQw
                createdAt: 1560417151751
                updatedAt: 1561480482869
    SpacesResponse:
      description: The list of spaces
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/Space'
            type: array
          examples:
            response:
              value:
                - id: 0FzlE2wX
                  title: My Demo Space
                  description: Description as markdown
                  owner: HERE-12345678-1234-1111-1234-1234432112344321
                  cid: dX0BH75QE8paCVQr8MQw
                  createdAt: 1560417151751
                  updatedAt: 1561480482869
    StatisticsResponse:
      description: Statistical information about a space.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatisticsResponse'
    HistoryStatisticsResponse:
      description: Statistical information about a history.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HistoryStatisticsResponse'
    ConnectorResponse:
      x-experimental: true
      description: The connector
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectorConfig'
    ConnectorsResponse:
      x-experimental: true
      description: The list of connectors
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ConnectorConfig'
            type: array
  requestBodies:
    Feature:
      description: A Feature object.
      required: true
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureRequest'
    FeatureCollection:
      description: A FeatureCollection object.
      required: true
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureCollectionRequest'
    FeatureCollectionOrFeatureModificationList:
      description: A FeatureCollection object or a FeatureModificationList object.
      required: true
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/FeatureCollectionRequest'
        application/vnd.here.feature-modification-list:
          x-experimental: true
          schema:
            $ref: '#/components/schemas/FeatureModificationList'
    Space:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Space'
    Geometry:
      description: A FeatureCollection object.
      required: true
      content:
        application/geo+json:
          schema:
            $ref: '#/components/schemas/Geometry'
    ConnectorConfig:
      x-experimental: true
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConnectorConfig'
  schemas:
    BBox:
      type: array
      description: Describes the coordinate range of the GeoJSON object.
      items:
        type: number
      example:
        - -100.1
        - -1.1
        - 100.1
        - 1.1
    CacheProfile:
      x-experimental: true
      description: >-
        Provides cache information used to determine where and for how long the content should
        be held. Each of the properties of this object represents a component and its
        TTL (time-to-live) in seconds, where zero value means the content should not be cached.
      type: object
      properties:
        browserTTL:
          type: integer
          description: For how long, in seconds, the client should hold the content cached.
        cdnTTL:
          type: integer
          description: For how long, in seconds, the CDN should hold the content cached.
        serviceTTL:
          type: integer
          description: For how long, in seconds, Data Hub should hold the content cached.
    Copyright:
      type: object
      description: Provides some information about a copyright
      properties:
        label:
          description: The copyright label to be displayed by the client.
          type: string
        alt:
          description: The description text for the label to be displayed by the client.
          type: string
      example:
        label: HERE
        alt: HERE XYZ
    Estimated:
      type: boolean
      description: True if the value is only an estimation; false otherwise.
      example: true
    NSXYZ:
      type: object
      description: The XYZ namespace.
      properties:
        space:
          description: The space ID.
          example: 0FzlE2wX
          readOnly: true
          type: string
        tags:
          description: The tags for this objects.
          items:
            type: string
          type: array
        createdAt:
          description: >-
            The UNIX Epoch time of when this feature has been created (in
            milliseconds sind 01.01.1970).
          example: 1234567890123
          format: int64
          readOnly: true
          type: integer
        updatedAt:
          description: >-
            The UNIX Epoch time of when this feature has been last updated (in
            milliseconds sind 01.01.1970).
          example: 1234567890123
          format: int64
          readOnly: true
          type: integer
    Position:
      type: array
      description: >-
        A position with coordinates in x, y order (longitude, latitude for
        geographic coordinates and optionally altitude or elevation).
      items:
        type: number
      maxItems: 3
      minItems: 2
      example:
        - 100.1
        - 0.1
    Properties:
      type: object
      description: The properties of the feature.
      properties:
        '@ns:com:here:xyz':
          $ref: '#/components/schemas/NSXYZ'
      additionalProperties:
        type: object
    Space:
      type: object
      description: A space declaration.
      properties:
        id:
          description: >-
            The unique identifier of the space which consists of an (optional)
            prefix and a base part (prefix-base).
          example: 0FzlE2wX
          type: string
        title:
          description: The space title.
          example: My Demo Space
          type: string
        description:
          description: The space description in markdown format.
          example: Description as markdown.
          type: string
        owner:
          description: The identifier of the owner of this space, most likely the HERE account ID.
          type: string
        shared:
          description: >
            If set to __true__, every authenticated user can read the features
            in the space.

            When publishing a space it's also recommended to set the fields
            __copyright__ & __license__.
          type: boolean
        readOnly:
          description: A flag indicating whether the space allows write operations (false) or not (true).
          type: boolean
        copyright:
          items:
            $ref: '#/components/schemas/Copyright'
          type: array
        license:
          description: Information about the license bound to the data within the space.
          enum:
            - AFL-3.0
            - Apache-2.0
            - Artistic-2.0
            - BSL-1.0
            - BSD-2-Clause
            - BSD-3-Clause
            - BSD-3-Clause-Clear
            - CC0-1.0
            - CC-BY-4.0
            - CC-BY-SA-4.0
            - WTFPL
            - ECL-1.0
            - ECL-2.0
            - EUPL-1.1
            - AGPL-3.0-only
            - GPL-2.0-only
            - GPL-3.0-only
            - LGPL-2.1-only
            - LGPL-3.0-only
            - ISC
            - LPPL-1.3c
            - MS-PL
            - MIT
            - MPL-2.0
            - OSL-3.0
            - PostgreSQL
            - OFL-1.1
            - NCSA
            - Unlicense
            - Zlib
            - ODbL-1.0
          type: string
        storage:
          $ref: '#/components/schemas/SpaceStorage'
        client:
          $ref: '#/components/schemas/SpaceClient'
        enableUUID:
          x-experimental: true
          default: false
          description: >-
            Whether the uuid should be added to the response or not.
          example: true
          type: boolean
        enableHistory:
          x-experimental: true
          default: false
          description: >-
            Whether the feature's modification history should be saved.
          example: true
          type: boolean
        maxVersionCount:
          x-experimental: true
          default: 0
          description: >-
            Used to control how many versions should be kept in the history. -1 means infinite.
          example: -1
          type: integer
        packages:
          description: List of packages that this space belongs to.
          items:
            type: string
          type: array
        cid:
          description: An additional identifier specifying a context of the owner.
          type: string
        tags:
          x-experimental: true
          description: The tags for this objects.
          items:
            type: string
          type: array
        createdAt:
          default: 1538352000000
          description: >-
            The UNIX Epoch time of when this space has been created (in
            milliseconds since 01.01.1970). Defaults to October 1st, 2018.
          example: 1538352000000
          format: int64
          readOnly: true
          type: integer
        updatedAt:
          default: 1538352000000
          description: >-
            The UNIX Epoch time of when this space has been last updated (in
            milliseconds sind 01.01.1970). Defaults to October 1st, 2018.
          example: 1538352000000
          format: int64
          readOnly: true
          type: integer
        cacheTTL:
          x-experimental: true
          default: -1
          description: >-
            The maximum amount of seconds of how long to hold objects of this Space in a cache.
          type: integer
        contentUpdatedAt:
          default: 1538352000000
          description: >-
            The UNIX Epoch time of when the content of this space has been last updated (in
            milliseconds since 01.01.1970). Defaults to October 1st, 2018.
          example: 1538352000000
          format: int64
          readOnly: true
          type: integer
        searchableProperties:
          $ref: '#/components/schemas/SearchableProperties'
        volatilityAtLastContentUpdate:
          x-experimental: true
          description: >-
            The calculated volatility at the last content update time.
          type: number
          format: double
          readOnly: true
        volatility:
          x-experimental: true
          description: >-
            An indicator, if the data in the space is edited often ( value tends to 1 ) or static ( value tends to 0 ).
          type: number
          format: double
          readOnly: true
        rights:
          description: >-
            The list of rights the current user has when accessing the space. This property
            is only shown when listing spaces with the option _includeRights=true_
          type: array
          items:
            type: string
          readOnly: true
        autoCacheProfile:
          x-experimental: true
          allOf:
            - $ref: '#/components/schemas/CacheProfile'
          readOnly: true
        listeners:
          x-experimental: true
          description: >-
            A list of connector configurations in which Data Hub sends events asynchronously.
          type: array
          items:
            $ref: '#/components/schemas/Connector'
        processors:
          x-experimental: true
          description: >-
            A list of connector configurations in which Data Hub sends events synchronously.
          type: array
          items:
            $ref: '#/components/schemas/Connector'
      example:
        title: My Demo Space
        description: Description as markdown
    SpaceClient:
      x-experimental: true
      type: object
      additionalProperties:
        type: object
      description: >-
        An arbitrary client configuration with hints or settings for the client,
        for example rendering instructions.
      example:
        key: value
    SearchableProperties:
      description: >-
        A map defined by the user that indicates, which of the feature's properties to be searchable.
        The key is the name of the property (nested properties can be specified using the
        dot-notation e.g.: some.nested.property) and the value is a boolean telling whether the
        property should be searchable or not.
        Setting the value to `false` the property won't be searchable at all. (Even if the  property
        was chosen to be searchable by the automated property-search algorithm before). Optional it is
        possible to define the datatype (object,array,string,number,boolean) of the property
        eg.: some.nested.property::array. If the datatype is not given, an attempt is made to determine
        it automatically.
      type: object
      additionalProperties:
        type: boolean
    SpaceStorage:
      x-experimental: true
      type: object
      description: >-
        The configuration of the space storage provider to be contacted by the
        space API.
      properties:
        id:
          description: The unique identifier of the connector to contact.
          example: psql
          type: string
        params:
          $ref: '#/components/schemas/SpaceStorageParams'
    SpaceStorageParams:
      x-experimental: true
      type: object
      description: >-
        The storage provider configuration, which contains optional parameters
        to be forwarded to the storage provider.
    Changeset:
      x-experimental: true
      type: object
      description: A Changeset includes three FeatureCollections grouped by the operations inserted,updated, deleted.
      properties:
        inserted:
          type: array
          description: FeatureColletion of inserted features.
          items:
            $ref: '#/components/schemas/FeatureCollectionResponse'
        updated:
          type: array
          description: FeatureColletion of updated features.
          items:
            $ref: '#/components/schemas/FeatureCollectionResponse'
        deleted:
          type: array
          description: FeatureColletion of deleted features.
          items:
            $ref: '#/components/schemas/FeatureCollectionResponse'
      example:
        type: Changeset
        inserted:
          type: FeatureCollection
          features:
            - type: Feature
              id: Q1369587
              geometry:
                type: Point
                coordinates:
                  - -62.696667
                  - 8.3125
              properties:
                name: Polideportivo Cachamay
                '@ns:com:here:xyz':
                  tags:
                    - football
                    - stadium
                sport: association football
                capacity: 41600
        updated:
          type: FeatureCollection
          features:
            - type: Feature
              id: Q947065
              geometry:
                type: Point
                coordinates:
                  - -110.948889
                  - 32.228889
              properties:
                name: Arizona Stadium
                '@ns:com:here:xyz':
                  tags:
                    - football
                    - stadium
                sport: American football
                capacity: 56037
        deleted:
          type: FeatureCollection
          features:
            - type: Feature
              id: Q1369587
              geometry:
                type: Point
                coordinates:
                  - -62.696667
                  - 8.3125
              properties:
                name: Murrayfield Stadium
                '@ns:com:here:xyz':
                  tags:
                    - rugby
                    - stadium
                sport: rugby union
                capacity: 67144
    GeoJSONObject:
      type: object
      description: |
        A GeoJSON object, see [RFC-7946](https://tools.ietf.org/html/rfc7946).
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946'
      required:
        - type
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
    FeatureRequest:
      allOf:
        - $ref: '#/components/schemas/GeoJSONObject'
        - type: object
          description: A Feature object represents a spatially bounded thing.
          properties:
            id:
              description: The unique identifier of the feature.
              type: string
            geometry:
              $ref: '#/components/schemas/Geometry'
            properties:
              $ref: '#/components/schemas/Properties'
            bbox:
              $ref: '#/components/schemas/BBox'
          example:
            type: Feature
            id: BfiimUxHjj
            geometry:
              type: Point
              coordinates:
                - -2.960847
                - 53.430828
            properties:
              name: Anfield
              '@ns:com:here:xyz':
                tags:
                  - football
                  - stadium
              amenity: Football Stadium
              capacity: 54074
              description: Home of Liverpool Football Club
    FeatureResponse:
      allOf:
        - $ref: '#/components/schemas/GeoJSONObject'
        - type: object
          description: A Feature object represents a spatially bounded thing.
          properties:
            id:
              description: The unique identifier of the feature.
              type: string
            geometry:
              $ref: '#/components/schemas/Geometry'
            properties:
              $ref: '#/components/schemas/Properties'
            bbox:
              $ref: '#/components/schemas/BBox'
          example:
            type: Feature
            id: BfiimUxHjj
            geometry:
              type: Point
              coordinates:
                - -2.960847
                - 53.430828
            properties:
              name: Anfield
              '@ns:com:here:xyz':
                createdAt: 1517504700726
                updatedAt: 1517504700726
                tags:
                  - football
                  - stadium
              amenity: Football Stadium
              capacity: 54074
              description: Home of Liverpool Football Club
    Geometry:
      allOf:
        - $ref: '#/components/schemas/GeoJSONObject'
        - type: object
          description: >-
            A Geometry object represents points, curves, and surfaces in coordinate
            space.
          properties:
            bbox:
              $ref: '#/components/schemas/BBox'
          example:
            type: Point
            coordinates:
              - -2.960847
              - 53.430828
    LineString:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A LineString geometry.
          properties:
            coordinates:
              items:
                $ref: '#/components/schemas/Position'
              type: array
    MultiLineString:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A MultiLineString geometry.
          properties:
            coordinates:
              items:
                items:
                  $ref: '#/components/schemas/Position'
                type: array
              type: array
    MultiPoint:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A MultiPoint geometry.
          properties:
            coordinates:
              items:
                $ref: '#/components/schemas/Position'
              type: array
    MultiPolygon:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A Polygon geometry.
          properties:
            coordinates:
              items:
                items:
                  items:
                    $ref: '#/components/schemas/Position'
                  type: array
                minLength: 4
                type: array
              type: array
    Point:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A Point geometry.
          properties:
            coordinates:
              $ref: '#/components/schemas/Position'
    Polygon:
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          description: A Polygon geometry.
          properties:
            coordinates:
              items:
                items:
                  $ref: '#/components/schemas/Position'
                type: array
              minLength: 4
              type: array
    XyzResponse:
      type: object
      description: The base type for all possible responses returned by the XYZ Hub.
      required:
        - type
      properties:
        etag:
          description: The HTTP entity tag ID.
          type: string
        type:
          type: string
      discriminator:
        propertyName: type
    CountResponse:
      x-deprecated: true
      allOf:
        - $ref: '#/components/schemas/XyzResponse'
        - type: object
          description: >-
            The response returned when successfully requesting the feature count of
            a space.
          properties:
            count:
              description: The feature count.
              format: int64
              minimum: 0
              readOnly: true
              type: integer
            estimated:
              $ref: '#/components/schemas/Estimated'
          example:
            type: CountResponse
            count: 100
            estimated: false
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/XyzResponse'
        - type: object
          description: >-
            The response send when the request failed. This response may be send for
            certain HTTP error codes like 403 Forbidden or 502 Bad Gateway and
            should hold more details about the error reason.
          properties:
            streamId:
              description: >-
                A unique identifier of the request. This identifier should be
                provided when reporting errors. Its used to track requests
                through the XYZ platform.
              type: string
            type:
              type: string
              description: The type of the error. Defaults to 'ErrorResponse'.
            error:
              type: string
              description: The error summary.
            errorMessage:
              type: string
              description: >-
                A human readable message in English that should provide a more
                detailed description of the error reason.
    StatisticsResponse:
      allOf:
        - $ref: '#/components/schemas/XyzResponse'
        - type: object
          description: The response returned to when counting features in a space.
          properties:
            count:
              type: object
              readOnly: true
              properties:
                value:
                  type: integer
                  description: The amount of features being in the space.
                  format: int64
                  minimum: 0
                estimated:
                  $ref: '#/components/schemas/Estimated'
            byteSize:
              type: object
              readOnly: true
              properties:
                value:
                  type: integer
                  description: >-
                    The amount of bytes that are allocated in the storage for
                    this space.
                  format: int64
                  minimum: 0
                estimated:
                  $ref: '#/components/schemas/Estimated'
            bbox:
              type: object
              description: >-
                The most outer bounding box around all features being within the
                space.
              readOnly: true
              properties:
                value:
                  $ref: '#/components/schemas/BBox'
                estimated:
                  $ref: '#/components/schemas/Estimated'
            geometryTypes:
              type: object
              description: >-
                The types of geometries part of the space.
              readOnly: true
              properties:
                value:
                  type: array
                  items:
                    type: string
                  example:
                    - Point
                    - LineString
                estimated:
                  $ref: '#/components/schemas/Estimated'
            properties:
              type: object
              description: >-
                The properties of the features of the space.
              readOnly: true
              properties:
                value:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        description: Property key of the feature.
                        type: string
                        example: Route
                      count:
                        description: Count of the features with the property.
                        type: number
                        example: 1202
                      searchable:
                        description: Specifies if the property is searchable.
                        type: boolean
                        example: false
                estimated:
                  $ref: '#/components/schemas/Estimated'
                searchable:
                  type: string
                  description: Specifies the scope of searchability of the properties. One of NONE, PARTIAL, ALL.
                  example: PARTIAL
            tags:
              type: object
              description: Tags of the space with their count.
              readOnly: true
              properties:
                value:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        description: Tag name
                        type: string
                      count:
                        description: Count of the tag
                        type: number
                estimated:
                  $ref: '#/components/schemas/Estimated'
            searchable:
              type: string
              description: Specifies the scope of searchability of the properties. One of NONE, PARTIAL, ALL.
              example: PARTIAL
          example:
            type: StatisticsResponse
            count:
              value: 29208
              estimated: true
            byteSize:
              value: 108364
              estimated: true
            bbox:
              value:
                - -10
                - -10
                - 10
                - 10
              estimated: true
            geometryTypes:
              value:
                - Point
              estimated: true
            properties:
              value:
                - key: Route
                  count: 29208
                  searchable: true
                - key: Route Type
                  count: 29208
                  searchable: true
              estimated: true
              searchable: PARTIAL
            tags:
              value:
                - key: PuneBusStop
                  count: 29208
            etag: 072d3ec0f881b4e7
    HistoryStatisticsResponse:
      allOf:
        - $ref: '#/components/schemas/XyzResponse'
        - type: object
          description: The response returned to when counting features in a history.
          properties:
            count:
              type: object
              readOnly: true
              properties:
                value:
                  type: integer
                  description: The amount of features being in the history.
                  format: int64
                  minimum: 0
                estimated:
                  $ref: '#/components/schemas/Estimated'
            byteSize:
              type: object
              readOnly: true
              properties:
                value:
                  type: integer
                  description: >-
                    The amount of bytes that are allocated in the storage for
                    this history.
                  format: int64
                  minimum: 0
                estimated:
                  $ref: '#/components/schemas/Estimated'
            maxVersion:
              type: object
              readOnly: true
              properties:
                value:
                  type: integer
                  description: >-
                    The last version which got written into the history.
                  format: int64
                  minimum: 0
                estimated:
                  $ref: '#/components/schemas/Estimated'
          example:
            type: HistoryStatisticsResponse
            count:
              value: 29208
              estimated: true
            byteSize:
              value: 108364
              estimated: true
            maxVersion:
              value: 112
              estimated: true
    FeatureCollectionRequest:
      allOf:
        - type: object
          description: A FeatureCollection GeoJSON object.
          required:
            - features
          properties:
            inserted:
              type: array
              description: List of inserted feature IDs.
              items:
                type: string
            updated:
              type: array
              description: List of updated features IDs.
              items:
                type: string
            features:
              type: array
              description: Features included in the collection.
              items:
                $ref: '#/components/schemas/FeatureRequest'
            bbox:
              $ref: '#/components/schemas/BBox'
          example:
            type: FeatureCollection
            features:
              - type: Feature
                id: BfiimUxHjj
                geometry:
                  type: Point
                  coordinates:
                    - -2.960847
                    - 53.430828
                properties:
                  name: Anfield
                  '@ns:com:here:xyz':
                    tags:
                      - football
                      - stadium
                  amenity: Football Stadium
                  capacity: 54074
                  description: Home of Liverpool Football Club
    ChangesetCollectionResponse:
      x-experimental: true
      allOf:
        - $ref: '#/components/schemas/XyzResponse'
        - type: object
          description: A ChangesetCollection JSON object.
          properties:
            startVersion:
              type: integer
              description: Defines the minimal version.
            endVersion:
              type: integer
              description: Defines the maximial version.
            versions:
              type: object
              description: Map of Versions. Each Version contains a Changeset.
              additionalProperties:
                $ref: '#/components/schemas/Changeset'
            nextPageToken:
              type: string
              description: The handle of the next batch.
      example:
        type: ChangesetCollection
        startVersion: 1
        endVersion: 2
        versions:
          "1":
            inserted:
              type: FeatureCollection
              features:
                - type: Feature
                  id: Q1369587
                  geometry:
                    type: Point
                    coordinates:
                      - -62.696667
                      - 8.3125
                  properties:
                    name: Polideportivo Cachamay
                    '@ns:com:here:xyz':
                      tags:
                        - football
                        - stadium
                      version: 1
                    sport: association football
                    capacity: 41600
            updated:
              type: FeatureCollection
              features:
                - type: Feature
                  id: Q947065
                  geometry:
                    type: Point
                    coordinates:
                      - -110.948889
                      - 32.228889
                  properties:
                    name: Arizona Stadium
                    '@ns:com:here:xyz':
                      tags:
                        - football
                        - stadium
                      version: 1
                    sport: American football
                    capacity: 56037
            deleted:
              type: FeatureCollection
              features: []
            nextPageToken: 1000
    CompactChangesetResponse:
      x-experimental: true
      allOf:
        - $ref: '#/components/schemas/XyzResponse'
        - $ref: '#/components/schemas/Changeset'
        - type: object
          description: A Changeset JSON object.
          properties:
            nextPageToken:
              type: string
              description: The handle of the next batch.
      example:
        type: Changeset
        inserted:
          type: FeatureCollection
          features:
            - type: Feature
              id: Q1369587
              geometry:
                type: Point
                coordinates:
                  - -62.696667
                  - 8.3125
              properties:
                name: Polideportivo Cachamay
                '@ns:com:here:xyz':
                  tags:
                    - football
                    - stadium
                version: 1
                sport: association football
                capacity: 41600
        updated:
          type: FeatureCollection
          features:
            - type: Feature
              id: Q947065
              geometry:
                type: Point
                coordinates:
                  - -110.948889
                  - 32.228889
              properties:
                name: Arizona Stadium
                '@ns:com:here:xyz':
                  tags:
                    - football
                    - stadium
                version: 5
                sport: American football
                capacity: 56037
        deleted:
          type: FeatureCollection
          features: []
        nextPageToken: 1000
    FeatureCollectionResponse:
      allOf:
        - $ref: '#/components/schemas/XyzResponse'
        - type: object
          description: A FeatureCollection GeoJSON object.
          required:
            - features
          properties:
            inserted:
              type: array
              description: List of inserted feature IDs.
              items:
                type: string
            updated:
              type: array
              description: List of updated features IDs.
              items:
                type: string
            features:
              type: array
              description: Features included in the collection.
              items:
                $ref: '#/components/schemas/FeatureResponse'
            bbox:
              $ref: '#/components/schemas/BBox'
          example:
            type: FeatureCollection
            features:
              - type: Feature
                id: BfiimUxHjj
                geometry:
                  type: Point
                  coordinates:
                    - -2.960847
                    - 53.430828
                properties:
                  name: Anfield
                  '@ns:com:here:xyz':
                    createdAt: 1517504700726
                    updatedAt: 1517504700726
                    tags:
                      - football
                      - stadium
                  amenity: Football Stadium
                  capacity: 54074
                  description: Home of Liverpool Football Club
    FeatureCollectionIterable:
      allOf:
        - $ref: '#/components/schemas/FeatureCollectionResponse'
        - type: object
          description: A FeatureCollection GeoJSON object with handle.
          properties:
            handle:
              type: string
              description: The handle of the next batch.
          example:
            type: FeatureCollection
            handle: 1000
            features:
              - type: Feature
                id: BfiimUxHjj
                geometry:
                  type: Point
                  coordinates:
                    - -2.960847
                    - 53.430828
                properties:
                  name: Anfield
                  '@ns:com:here:xyz':
                    createdAt: 1517504700726
                    updatedAt: 1517504700726
                    tags:
                      - football
                      - stadium
                  amenity: Football Stadium
                  capacity: 54074
                  description: Home of Liverpool Football Club
    FeatureModificationList:
      x-experimental: true
      type: object
      description: |
        An object describing modifications of features. It contains feature data being provided as
        GeoJSON FeatureCollections (see [RFC-7946](https://tools.ietf.org/html/rfc7946))
        or (in case if deletions) a list of feature IDs.
      externalDocs:
        url: 'https://tools.ietf.org/html/rfc7946'
      required:
        - type
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
        modifications:
          type: array
          description: A list of FeatureModification objects
          items:
            $ref: '#/components/schemas/FeatureModification'
      example:
        type: FeatureModificationList
        modifications:
          - type: FeatureModification
            featureData:
              type: FeatureCollection
              features:
                - type: Feature
                  id: BfiimUxHjj
                  geometry:
                    type: Point
                    coordinates:
                      - -2.960847
                      - 53.430828
                  properties:
                    name: Anfield
                    '@ns:com:here:xyz':
                      tags:
                        - football
                        - stadium
                    amenity: Football Stadium
                    capacity: 54074
                    description: Home of Liverpool Football Club
    FeatureModification:
      x-experimental: true
      type: object
      description: A FeatureModification object containing GeoJSON FeatureCollections
        (see [RFC-7946](https://tools.ietf.org/html/rfc7946)) or (in case if deletions) a list of
        feature IDs.
      required:
        - type
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
        featureData:
          $ref: '#/components/schemas/FeatureCollectionRequest'
        featureIds:
          type: array
          description: A list of feature IDs (strings)
          items:
            type: string
        onFeatureNotExists:
          $ref: '#/components/schemas/OnFeatureNotExists'
        onFeatureExists:
          $ref: '#/components/schemas/OnFeatureExists'
        onMergeConflict:
          $ref: '#/components/schemas/OnMergeConflict'
      example:
        type: FeatureModification
        featureData:
          type: FeatureCollection
          features:
            - type: Feature
              id: BfiimUxHjj
              geometry:
                type: Point
                coordinates:
                  - -2.960847
                  - 53.430828
              properties:
                name: Anfield
                '@ns:com:here:xyz':
                  tags:
                    - football
                    - stadium
                amenity: Football Stadium
                capacity: 54074
                description: Home of Liverpool Football Club
    OnFeatureNotExists:
      x-experimental: true
      type: string
      enum:
        - retain
        - error
        - create
      default: create
    OnFeatureExists:
      x-experimental: true
      type: string
      enum:
        - patch
        - replace
        - merge
        - delete
        - retain
        - error
      default: patch
    OnMergeConflict:
      x-experimental: true
      type: string
      enum:
        - error
        - retain
        - replace
      default: error
    Connector:
      x-experimental: true
      type: object
      description: >-
        A connector configuration which is attached to the space and can act as Listener or Processor.
      properties:
        id:
          type: string
          description: >-
            The connector ID, which should correspond to one of the existing connectors in Data Hub.
        eventTypes:
          type: array
          description: >-
            An array of strings where each of the elements, describes the type of event and in
            which phase Data Hub should notify the connector.
          items:
            type: string
          example:
            - ModifyFeaturesEvent.request
            - ModifyFeaturesEvent.response
        params:
          description: >-
            An arbitrary object containing additional properties which are passed to the connector
            together within the event sent by Data Hub. It can be used to configure the connector
            per-space basis.
          additionalProperties: true
    StorageCapabilities:
      x-experimental: true
      type: object
      description: Arbitrary parameters to be provided to the remote function with the event.
      properties:
        preserializedResponseSupport:
          description: >-
            If the lambda supports pre-serialization.
          type: boolean
        relocationSupport:
          description: >-
            If the lambda supports relocation events.
          type: boolean
        maxUncompressedSize:
          description: >-
            The maximum size of the payload, which the connector accepts as uncompressed data.
          format: int64
          default: 2147483647
          type: integer
        maxPayloadSize:
          description: >-
            The maximum size of the event, which this connector can directly receive.
          format: int64
          default: 6291456
          type: integer
        propertySearch:
          description: >-
            Whether searching by properties is supported. (Only applicable for storage connectors)
          default: false
          type: boolean
        searchablePropertiesConfiguration:
          description: >-
            Whether it's supported to configure the searchableProperties of spaces. (Only applicable for storage connectors)
          default: false
          type: boolean
        enableAutoCache:
          description: >-
            Whether automatic caching configuration for spaces is supported.
          default: false
          type: boolean
        clusteringTypes:
          description: >-
            A list of supported clustering types / algorithms. ("hexbin", "quad", "quadbin") (Only applicable for storage connectors)
          items:
            type: string
          type: array
    RemoteFunctionConfig:
      x-experimental: true
      type: object
      description: A connector declaration.
      discriminator:
        propertyName: type
      required:
        - type
      properties:
        type:
          type: string
        id:
          description: >-
            The ID of this config.
          example: my-id
          type: string
        warmUp:
          description: >-
            The number of containers to keep warmed up.
          type: integer
          format: int64
    AWSLambda:
      x-experimental: true
      allOf:
        - $ref: '#/components/schemas/RemoteFunctionConfig'
        - type: object
          properties:
            lambdaARN:
              description: >-
                The ARN of the AWS lambda main function to be called for the respective operation.
              type: string
            roleARN:
              description: >-
                The ARN of an AWS IAM Role granting the permission to call the lambda function specified in {@link #lambdaARN}. The referenced role
                needs to allow this service to assume it by adding this service' role ARN as principle into its trust policy.
                See: [AWS Docs](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#delegation)
              type: string
    Http:
      x-experimental: true
      allOf:
        - $ref: '#/components/schemas/RemoteFunctionConfig'
        - type: object
          properties:
            url:
              description: >-
                The URL of the endpoint to POST events to.
              type: string
    ConnectorConfig:
      x-experimental: true
      type: object
      description: A connector declaration.
      required:
        - id
        - contactEmails
      properties:
        id:
          description: >-
            The unique identifier of the connector.
          example: my-custom-connector-id
          type: string
        active:
          description: >-
            Whether this connector is activated.
            If this flag is set to false, no connector client will be available for it.
            That means no requests can be performed to the connector.
          type: boolean
          default: true
        skipAutoDisable:
          description: >-
            Whether to skip the automatic disabling of this connector even when being not healthy.
          type: boolean
          default: false
        trusted:
          description: >-
            Whether the connector is a trusted connector. Trusted connectors will receive more information than normal connectors.
          type: boolean
          default: false
        params:
          description: >-
            Arbitrary parameters to be provided to the remote function with the event.
          type: object
        capabilities:
          $ref: '#/components/schemas/StorageCapabilities'
        remoteFunctions:
          description: >-
            A map with AWS-Regions as keys (eu-west-1 & us-east-1) and a 'RemoteFunctionConfig' as value.
          type: object
          additionalProperties:
            type: object
        remoteFunction:
          $ref: '#/components/schemas/RemoteFunctionConfig'
        connectionSettings:
          description: >-
            The connection and throttling settings.
          type: object
          properties:
            maxConnections:
              description: The maximal amount of concurrent connector instances to use.
              type: integer
              format: int64
              default: 64
        defaultEventTypes:
          description: >-
            The default event types to register the connector for. Can be overridden in the space definition by the space creator.
          type: array
          items:
            type: string
            enum: [
                ModifySpaceEvent.request,
                ModifySpaceEvent.response,
                GetStatisticsEvent.request,
                GetStatisticsEvent.response,
                GetFeaturesByIdEvent.request,
                GetFeaturesByIdEvent.response,
                SearchForFeaturesEvent.request,
                SearchForFeaturesEvent.response,
                IterateFeaturesEvent.request,
                IterateFeaturesEvent.response,
                GetFeaturesByTileEvent.request,
                GetFeaturesByTileEvent.response,
                GetFeaturesByBBoxEvent.request,
                GetFeaturesByBBoxEvent.response,
                GetFeaturesByGeometryEvent.request,
                GetFeaturesByGeometryEvent.response,
                ModifyFeaturesEvent.request,
                ModifyFeaturesEvent.response,
                DeleteFeaturesByTagEvent.request,
                DeleteFeaturesByTagEvent.response,
                ContentModifiedNotification.request
            ]
        contactEmails:
          description: >-
            A list of email addresses of responsible owners for this connector. These email addresses will be used to send potential health warnings and other notifications.
          type: array
          items:
            type: string
            format: email
      example:
        capabilities:
          clusteringTypes:
            - hexbin
            - quad
            - quadbin
          preserializedResponseSupport: true
          propertySearch: true
          relocationSupport: true
          searchablePropertiesConfiguration: true
        contactEmails:
          - MY_TEAM_E-MAIL@here.com
          - DEVELOPER_E-MAIL@here.com
        id: my-custom-unique-id
        params:
          ecps: myEncryptedAndVeryLongEcpsString
          autoIndexing: true
          propertySearch: true
        remoteFunction:
          id: test1
          lambdaARN: arn:aws:lambda:eu-west-1:<myAwsAccountId>:function:test1
          roleARN:
          type: AWSLambda
  securitySchemes:
    authToken:
      bearerFormat: JWTPayload
      scheme: bearer
      type: http
security:
  - authToken: []
tags:
  - name: Read Spaces
  - name: Edit Spaces
  - name: Read Features
  - name: Edit Features
x-suppress:
  - $ref: '#/components/schemas/Point'
  - $ref: '#/components/schemas/MultiPoint'
  - $ref: '#/components/schemas/LineString'
  - $ref: '#/components/schemas/MultiLineString'
  - $ref: '#/components/schemas/Polygon'
  - $ref: '#/components/schemas/MultiPolygon'
